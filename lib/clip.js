// Generated by CoffeeScript 1.6.2
(function() {
  var Clip, PropertyChain, bindable, dref;

  dref = require("dref");

  bindable = require("bindable");

  PropertyChain = (function() {
    function PropertyChain(clip) {
      this.clip = clip;
      this._commands = [];
    }

    PropertyChain.prototype.ref = function(path) {
      this._commands.push({
        ref: path
      });
      return this;
    };

    PropertyChain.prototype.call = function(path, args) {
      this._commands.push({
        name: path,
        args: args
      });
      return this;
    };

    PropertyChain.prototype.value = function() {
      var command, cv, _i, _len, _ref;

      cv = this.clip.data;
      _ref = this._commands;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        command = _ref[_i];
        if (command.ref) {
          cv = dref.get(cv, command.ref);
        } else {
          cv = dref.get(cv, command.name);
          if (cv != null) {
            cv.call(cv, command.args);
          }
        }
        if (!cv) {
          break;
        }
      }
      return cv;
    };

    return PropertyChain;

  })();

  Clip = (function() {
    /*
    */
    function Clip(data) {
      if (data == null) {
        data = {};
      }
      this.data = new bindable.Object(data);
    }

    /*
    */


    Clip.prototype.bind = function(property, to) {
      var _ref;

      return (_ref = this.data).bind.apply(_ref, arguments);
    };

    /*
    */


    Clip.prototype.ref = function(path) {
      return new PropertyChain(this.data).ref(path);
    };

    return Clip;

  })();

  module.exports = Clip;

}).call(this);
