// Generated by CoffeeScript 1.6.2
(function() {
  var Clip, PropertyChain, bindable, dref, events,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  dref = require("dref");

  events = require("events");

  PropertyChain = (function() {
    function PropertyChain(clip) {
      this.clip = clip;
      this._commands = [];
    }

    PropertyChain.prototype.ref = function(path) {
      this._commands.push({
        ref: path
      });
      return this;
    };

    PropertyChain.prototype.call = function(path, args) {
      this._commands.push({
        ref: path,
        args: args
      });
      return this;
    };

    PropertyChain.prototype.value = function() {
      var command, cv, _i, _len, _ref;

      cv = this.clip.data;
      _ref = this._commands;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        command = _ref[_i];
        this.clip._watch(command.ref, cv);
        if (command.ref) {
          cv = dref.get(cv, command.ref);
        } else {
          cv = dref.get(cv, command.name);
          if (cv && typeof cv === "function") {
            cv = cv != null ? cv.apply(cv, command.args) : void 0;
          } else {
            cv = void 0;
          }
        }
        if (!cv) {
          break;
        }
      }
      return cv;
    };

    return PropertyChain;

  })();

  Clip = (function(_super) {
    __extends(Clip, _super);

    /*
    */


    function Clip(options) {
      this.options = options;
      this.update = __bind(this.update, this);
      this.script = options.script;
      this.data = new bindable.Object(options.data || {});
      this.modifiers = options.modifiers || {};
      this._watching = {};
      this.update();
    }

    /*
    */


    Clip.prototype.ref = function(path) {
      return new PropertyChain(this).ref(path);
    };

    Clip.prototype.call = function(path, args) {
      return new PropertyChain(this).call(path, args);
    };

    /*
    */


    Clip.prototype.update = function() {
      var newValue;

      newValue = this.script.call(this);
      if (newValue === this.value) {
        return newValue;
      }
      this.emit("change", this.value = newValue);
      return newValue;
    };

    /*
    */


    Clip.prototype._watch = function(path, target) {
      if (this._watching[path]) {
        if (this._watching[path].target === target) {
          return;
        }
        this._watching[path].binding.dispose();
      }
      return this._watching[path] = {
        target: target,
        binding: target.bind(path).watch(true).to(this.update).to
      };
    };

    return Clip;

  })(events.EventEmitter);

  module.exports = Clip;

}).call(this);
