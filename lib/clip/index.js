// Generated by CoffeeScript 1.6.2
(function() {
  var Clip, ClipScript, ClipScripts, bindable, dref, events, type,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dref = require("dref");

  events = require("events");

  bindable = require("bindable");

  type = require("type-component");

  /*
  */


  ClipScript = (function(_super) {
    __extends(ClipScript, _super);

    /*
    */


    function ClipScript(script, clip) {
      this.script = script;
      this.clip = clip;
      this._debounceUpdate = __bind(this._debounceUpdate, this);
      this._update2 = __bind(this._update2, this);
      this.options = this.clip.options;
      this._bindings = [];
    }

    /*
    */


    ClipScript.prototype.dispose = function() {
      var binding, _i, _len, _ref;

      _ref = this._bindings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        binding = _ref[_i];
        binding.dispose();
      }
      return this.__context = void 0;
    };

    /*
    */


    ClipScript.prototype.update = function() {
      var newValue;

      if (this._locked) {
        return;
      }
      this._watchRefs();
      this._locked = true;
      newValue = this.script.fn.call(this);
      this._locked = false;
      if (newValue === this.value) {
        return newValue;
      }
      this._updated = true;
      this.emit("change", this.value = newValue);
      return newValue;
    };

    /*
    */


    ClipScript.prototype.get = function(path) {
      var v;

      v = this.__context.get(path);
      return v;
    };

    /*
    */


    ClipScript.prototype.set = function(path, value) {
      var v;

      v = this.__context.set(path, value);
      return v;
    };

    /*
    */


    ClipScript.prototype.call = function(ctxPath, key, params) {
      var ctx, fn;

      if (arguments.length === 2) {
        params = key;
        ctx = this.__context;
        fn = ctx.get(ctxPath);
      } else {
        ctx = this.__context;
        fn = ctx.get(ctxPath + "." + key);
      }
      return fn != null ? fn.apply(ctx, params) : void 0;
    };

    /*
    */


    ClipScript.prototype.watch = function() {
      this.__watch = true;
      return this;
    };

    /*
    */


    ClipScript.prototype.unwatch = function() {
      this.__watch = false;
      this.dispose();
      return this;
    };

    /*
    */


    ClipScript.prototype.references = function() {
      return this.script.refs || [];
    };

    /*
    */


    ClipScript.prototype._watchRefs = function() {
      var ref, _i, _len, _ref, _results,
        _this = this;

      if (this.__context === this.clip.data) {
        return;
      }
      this.__context = this.clip.data;
      if (!(this.script.refs || !this.__watch)) {
        return;
      }
      _ref = this.script.refs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ref = _ref[_i];
        _results.push((function(ref) {
          var bindableBinding;

          bindableBinding = void 0;
          return _this._bindings.push(_this.__context.bind(ref, function(value, oldValue) {
            if (bindableBinding) {
              bindableBinding.dispose();
              _this._bindings.splice(_this._bindings.indexOf(bindableBinding), 1);
            }
            if (value != null ? value.__isBindable : void 0) {
              _this._bindings.push(bindableBinding = _this._watchBindable(value, oldValue));
            }
            return _this.update();
          }));
        })(ref));
      }
      return _results;
    };

    /*
     watches a bindable object for any changes, then updates this binding asynchronously This is important
     for such a case: {{ someObject | someComputer() }}
    */


    ClipScript.prototype._watchBindable = function(value, oldValue) {
      var onChange,
        _this = this;

      value.on("change", onChange = function() {
        if (!_this._updated) {
          return;
        }
        return _this._debounceUpdate();
      });
      return {
        dispose: function() {
          return value.off("change", onChange);
        }
      };
    };

    /*
    */


    ClipScript.prototype._update2 = function() {
      return this.update();
    };

    /*
    */


    ClipScript.prototype._debounceUpdate = function() {
      clearTimeout(this._debounceTimeout);
      return this._debounceTimeout = setTimeout(this._update2, 0);
    };

    return ClipScript;

  })(events.EventEmitter);

  ClipScripts = (function() {
    /*
    */
    function ClipScripts(clip, scripts) {
      this.clip = clip;
      this._scripts = {};
      this.names = [];
      this._bindScripts(scripts);
    }

    /*
    */


    ClipScripts.prototype.watch = function() {
      var key;

      for (key in this._scripts) {
        this._scripts[key].watch();
      }
      return this;
    };

    /*
    */


    ClipScripts.prototype.unwatch = function() {
      var key;

      for (key in this._scripts) {
        this._scripts[key].unwatch();
      }
      return this;
    };

    /*
    */


    ClipScripts.prototype.update = function() {
      var key;

      for (key in this._scripts) {
        this._scripts[key].update();
      }
      return this;
    };

    /*
    */


    ClipScripts.prototype.dispose = function() {
      var key;

      for (key in this._scripts) {
        this._scripts[key].dispose();
      }
      return this._scripts = {};
    };

    /*
    */


    ClipScripts.prototype.get = function(name) {
      return this._scripts[name];
    };

    /*
    */


    ClipScripts.prototype._bindScripts = function(scripts) {
      var scriptName;

      if (scripts.fn) {
        this._bindScript("value", scripts);
      } else {
        for (scriptName in scripts) {
          this._bindScript(scriptName, scripts[scriptName]);
        }
      }
    };

    /*
    */


    ClipScripts.prototype._bindScript = function(name, script, watch) {
      var clipScript,
        _this = this;

      this.names.push(name);
      clipScript = new ClipScript(script, this.clip);
      this._scripts[name] = clipScript;
      return clipScript.on("change", function(value) {
        return _this.clip.set(name, value);
      });
    };

    return ClipScripts;

  })();

  Clip = (function() {
    /*
    */
    function Clip(options) {
      var scripts;

      this.options = options;
      this._self = this.context = options.context || new bindable.Object();
      this.reset(options.data, false);
      scripts = this.options.scripts || this.options.script;
      if (scripts) {
        this.scripts = new ClipScripts(this, scripts);
      }
      if (options.watch !== false) {
        this.watch();
      }
    }

    /*
    */


    Clip.prototype.reset = function(data, update) {
      if (update == null) {
        update = true;
      }
      this.data = data ? data : new bindable.Object();
      if (update) {
        this.update();
      }
      return this;
    };

    /*
    */


    Clip.prototype.watch = function() {
      this.scripts.watch();
      return this;
    };

    /*
    */


    Clip.prototype.unwatch = function() {
      return this.scripts.unwatch();
    };

    /*
    */


    Clip.prototype.update = function() {
      this.scripts.update();
      return this;
    };

    /*
    */


    Clip.prototype.dispose = function() {
      var _ref, _ref1;

      if ((_ref = this._self) != null) {
        _ref.dispose();
      }
      return (_ref1 = this.scripts) != null ? _ref1.dispose() : void 0;
    };

    Clip.prototype.script = function(name) {
      return this.scripts.get(name);
    };

    Clip.prototype.get = function() {
      var _ref;

      return (_ref = this._self).get.apply(_ref, arguments);
    };

    Clip.prototype.set = function() {
      var _ref;

      return (_ref = this._self).set.apply(_ref, arguments);
    };

    Clip.prototype.bind = function() {
      var _ref;

      return (_ref = this._self).bind.apply(_ref, arguments);
    };

    return Clip;

  })();

  module.exports = Clip;

}).call(this);
