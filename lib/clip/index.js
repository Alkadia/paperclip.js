// Generated by CoffeeScript 1.6.2
(function() {
  var Clip, ClipWatchers, PropertyChain, ScriptWatcher, bindable, dref, events,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  dref = require("dref");

  events = require("events");

  /*
   Reads a property chain
  */


  PropertyChain = (function() {
    function PropertyChain(watcher) {
      this.watcher = watcher;
      this._commands = [];
      this.clip = this.watcher.clip;
    }

    PropertyChain.prototype.ref = function(path) {
      this._commands.push({
        ref: path
      });
      return this;
    };

    PropertyChain.prototype.self = function(path) {
      this._self = true;
      this.ref(path);
      return this;
    };

    PropertyChain.prototype.call = function(path, args) {
      this._commands.push({
        ref: path,
        args: args
      });
      return this;
    };

    PropertyChain.prototype.value = function() {
      var command, cv, _i, _len, _ref;

      cv = this._self ? this.clip : this.clip.data;
      _ref = this._commands;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        command = _ref[_i];
        this.watcher._watch(command.ref, cv);
        cv = cv.get ? cv.get(command.ref) : dref.get(cv, command.ref);
        if (command.args) {
          if (cv && typeof cv === "function") {
            cv = cv != null ? cv.apply(cv, command.args) : void 0;
          } else {
            cv = void 0;
          }
        }
        if (!cv) {
          break;
        }
      }
      return cv;
    };

    return PropertyChain;

  })();

  ScriptWatcher = (function(_super) {
    __extends(ScriptWatcher, _super);

    /*
    */


    function ScriptWatcher(script, clip) {
      this.script = script;
      this.clip = clip;
      this.update = __bind(this.update, this);
      this.modifiers = this.clip.modifiers;
      this._watching = {};
    }

    /*
    */


    ScriptWatcher.prototype.dispose = function() {
      var key;

      for (key in this._watching) {
        this._watching[key].binding.dispose();
      }
      return this._watching = {};
    };

    /*
    */


    ScriptWatcher.prototype.update = function() {
      var newValue;

      newValue = this.script.call(this);
      if (newValue === this.value) {
        return newValue;
      }
      this.emit("change", this.value = newValue);
      return newValue;
    };

    /*
    */


    ScriptWatcher.prototype.ref = function(path) {
      return new PropertyChain(this).ref(path);
    };

    ScriptWatcher.prototype.self = function(path) {
      return new PropertyChain(this).self(path);
    };

    ScriptWatcher.prototype.call = function(path, args) {
      return new PropertyChain(this).call(path, args);
    };

    /*
    */


    ScriptWatcher.prototype._watch = function(path, target) {
      if (this._watching[path]) {
        if (this._watching[path].target === target) {
          return;
        }
        this._watching[path].binding.dispose();
      }
      return this._watching[path] = {
        target: target,
        binding: target.bind(path).watch(true).to(this.update)
      };
    };

    return ScriptWatcher;

  })(events.EventEmitter);

  ClipWatchers = (function() {
    /*
    */
    function ClipWatchers(clip, scripts) {
      this.clip = clip;
      this._watchers = {};
      this._bindScripts(scripts);
    }

    /*
    */


    ClipWatchers.prototype.dispose = function() {
      var key;

      for (key in this._watchers) {
        this._watchers[key].dispose();
      }
      return this._watchers = {};
    };

    /*
    */


    ClipWatchers.prototype._bindScripts = function(scripts) {
      var scriptName, _results;

      if (typeof scripts === "function") {
        return this._bindScript("value", scripts);
      } else {
        _results = [];
        for (scriptName in scripts) {
          _results.push(this._bindScript(scriptName, scripts[scriptName]));
        }
        return _results;
      }
    };

    /*
    */


    ClipWatchers.prototype._bindScript = function(name, script) {
      var watcher,
        _this = this;

      watcher = new ScriptWatcher(script, this.clip);
      this._watchers[name] = watcher;
      watcher.on("change", function(value) {
        return _this.clip.set(name, value);
      });
      return watcher.update();
    };

    return ClipWatchers;

  })();

  Clip = (function() {
    /*
    */
    function Clip(options) {
      this.options = options;
      this._self = new bindable.Object();
      this.data = new bindable.Object(options.data || {});
      this.modifiers = options.modifiers || {};
      if (this.options.script) {
        this._watchers = new ClipWatchers(this, this.options.script);
      }
    }

    Clip.prototype.dispose = function() {
      var _ref, _ref1;

      if ((_ref = this._self) != null) {
        _ref.dispose();
      }
      if ((_ref1 = this._watchers) != null) {
        _ref1.dispose();
      }
      this._self = void 0;
      return this._watchers = void 0;
    };

    Clip.prototype.get = function() {
      var _ref;

      return (_ref = this._self).get.apply(_ref, arguments);
    };

    Clip.prototype.set = function() {
      var _ref;

      return (_ref = this._self).set.apply(_ref, arguments);
    };

    Clip.prototype.bind = function() {
      var _ref;

      return (_ref = this._self).bind.apply(_ref, arguments);
    };

    return Clip;

  })();

  module.exports = Clip;

  module.exports.Watchers = ClipWatchers;

  module.exports.compile = require("./compile");

}).call(this);
