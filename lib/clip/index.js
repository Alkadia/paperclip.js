// Generated by CoffeeScript 1.6.2
var Clip, ClipScript, ClipScripts, PropertyChain, bindable, defaultModifiers, dref, events,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

dref = require("dref");

events = require("events");

bindable = require("bindable");

defaultModifiers = require("./modifiers");

/*
 Reads a property chain
*/


PropertyChain = (function() {
  /*
  */
  PropertyChain.prototype.__isPropertyChain = true;

  /*
  */


  function PropertyChain(watcher) {
    this.watcher = watcher;
    this._commands = [];
    this.clip = this.watcher.clip;
  }

  /*
  */


  PropertyChain.prototype.ref = function(path) {
    this._commands.push({
      ref: path
    });
    return this;
  };

  /*
  */


  PropertyChain.prototype.castAs = function(name) {
    this.watcher.cast[name] = this;
    return this;
  };

  /*
  */


  PropertyChain.prototype.path = function() {
    var c, path, _i, _len, _ref;

    path = [];
    _ref = this._commands;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      path.push(c.ref);
    }
    return path.join(".");
  };

  /*
  */


  PropertyChain.prototype.self = function(path) {
    this._self = true;
    this.ref(path);
    return this;
  };

  /*
  */


  PropertyChain.prototype.call = function(path, args) {
    this._commands.push({
      ref: path,
      args: args
    });
    return this;
  };

  /*
  */


  PropertyChain.prototype.exec = function() {
    this.currentValue = this.value();
    return this;
  };

  /*
  */


  PropertyChain.prototype.value = function(value) {
    var command, cv, hasValue, i, n, pv, _i, _len, _ref;

    hasValue = arguments.length;
    cv = this._self ? this.clip : this.clip.data;
    n = this._commands.length;
    _ref = this._commands;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      command = _ref[i];
      this.watcher._watch(command.ref, cv);
      if (i === n - 1 && hasValue) {
        if (cv.set) {
          cv.set(command.ref, value);
        } else {
          dref.set(cv, command.ref, value);
        }
      }
      pv = cv;
      cv = cv.get ? cv.get(command.ref) : dref.get(cv, command.ref);
      if (command.args) {
        if (cv && typeof cv === "function") {
          cv = cv != null ? cv.apply(pv, command.args) : void 0;
        } else {
          cv = void 0;
        }
      }
      if (!cv) {
        break;
      }
    }
    this.watcher.currentRef = this;
    return cv;
  };

  return PropertyChain;

})();

/*
*/


ClipScript = (function(_super) {
  __extends(ClipScript, _super);

  /*
  */


  function ClipScript(script, clip) {
    this.script = script;
    this.clip = clip;
    this.update = __bind(this.update, this);
    this.modifiers = this.clip.modifiers;
    this.defaultModifiers = defaultModifiers;
    this.options = this.clip.options;
    this._watching = {};
    this.cast = {};
  }

  /*
  */


  ClipScript.prototype.dispose = function() {
    var key;

    for (key in this._watching) {
      this._watching[key].binding.dispose();
    }
    return this._watching = {};
  };

  /*
  */


  ClipScript.prototype.update = function() {
    var newValue;

    newValue = this.script.fn.call(this);
    if (newValue === this.value) {
      return newValue;
    }
    this.emit("change", this.value = newValue);
    return newValue;
  };

  /*
  */


  ClipScript.prototype.watch = function() {
    this.__watch = true;
    this.update();
    return this;
  };

  /*
  */


  ClipScript.prototype.references = function() {
    if (!this.script.refs) {
      return [];
    }
  };

  /*
  */


  ClipScript.prototype.ref = function(path) {
    return new PropertyChain(this).ref(path);
  };

  ClipScript.prototype.self = function(path) {
    return new PropertyChain(this).self(path);
  };

  ClipScript.prototype.call = function(path, args) {
    return new PropertyChain(this).call(path, args);
  };

  ClipScript.prototype.castAs = function(name) {
    return new PropertyChain(this).castAs(name);
  };

  /*
  */


  ClipScript.prototype._watch = function(path, target) {
    if (!this.__watch) {
      return;
    }
    if (this._watching[path]) {
      if (this._watching[path].target === target) {
        return;
      }
      this._watching[path].binding.dispose();
    }
    return this._watching[path] = {
      target: target,
      binding: target.bind(path).watch(true).to(this.update)
    };
  };

  return ClipScript;

})(events.EventEmitter);

ClipScripts = (function() {
  /*
  */
  function ClipScripts(clip, scripts) {
    this.clip = clip;
    this._scripts = {};
    this.names = [];
    this._bindScripts(scripts);
  }

  /*
  */


  ClipScripts.prototype.watch = function() {
    var key;

    for (key in this._scripts) {
      this._scripts[key].watch();
    }
    return this;
  };

  /*
  */


  ClipScripts.prototype.update = function() {
    var key;

    for (key in this._scripts) {
      this._scripts[key].update();
    }
    return this;
  };

  /*
  */


  ClipScripts.prototype.dispose = function() {
    var key;

    for (key in this._scripts) {
      this._scripts[key].dispose();
    }
    return this._scripts = {};
  };

  /*
  */


  ClipScripts.prototype.get = function(name) {
    return this._scripts[name];
  };

  /*
  */


  ClipScripts.prototype._bindScripts = function(scripts) {
    var scriptName, _results;

    if (scripts.fn) {
      return this._bindScript("value", scripts);
    } else {
      _results = [];
      for (scriptName in scripts) {
        _results.push(this._bindScript(scriptName, scripts[scriptName]));
      }
      return _results;
    }
  };

  /*
  */


  ClipScripts.prototype._bindScript = function(name, script, watch) {
    var clipScript,
      _this = this;

    this.names.push(name);
    clipScript = new ClipScript(script, this.clip);
    this._scripts[name] = clipScript;
    return clipScript.on("change", function(value) {
      return _this.clip.set(name, value);
    });
  };

  return ClipScripts;

})();

Clip = (function() {
  /*
  */
  function Clip(options) {
    var scripts;

    this.options = options;
    this._self = new bindable.Object();
    this.reset(options.data, false);
    this.modifiers = options.modifiers || {};
    scripts = this.options.scripts || this.options.script;
    if (scripts) {
      this.scripts = new ClipScripts(this, scripts);
    }
    if (options.watch !== false) {
      this.watch();
    }
  }

  Clip.prototype.reset = function(data, update) {
    if (data == null) {
      data = {};
    }
    if (update == null) {
      update = true;
    }
    this.data = data.__isBindable ? data : new bindable.Object(data);
    if (update) {
      this.update();
    }
    return this;
  };

  Clip.prototype.watch = function() {
    this.scripts.watch();
    return this;
  };

  Clip.prototype.update = function() {
    this.scripts.update();
    return this;
  };

  Clip.prototype.dispose = function() {
    var _ref, _ref1;

    if ((_ref = this._self) != null) {
      _ref.dispose();
    }
    if ((_ref1 = this.scripts) != null) {
      _ref1.dispose();
    }
    this._self = void 0;
    return this._scripts = void 0;
  };

  Clip.prototype.script = function(name) {
    return this.scripts.get(name);
  };

  Clip.prototype.get = function() {
    var _ref;

    return (_ref = this._self).get.apply(_ref, arguments);
  };

  Clip.prototype.set = function() {
    var _ref;

    return (_ref = this._self).set.apply(_ref, arguments);
  };

  Clip.prototype.bind = function() {
    var _ref;

    return (_ref = this._self).bind.apply(_ref, arguments);
  };

  return Clip;

})();

module.exports = Clip;

module.exports.modifiers = defaultModifiers;
