// Generated by CoffeeScript 1.6.2
(function() {
  var BaseTokenizer, Codes, Tokenizer, key, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseTokenizer = require("../base/tokenizer");

  Codes = (function() {
    function Codes() {}

    Codes.OTHER = -1;

    Codes.WORD = 256;

    Codes.STRING = Codes.WORD + 1;

    Codes.VAR = Codes.STRING + 1;

    Codes.WS = Codes.VAR + 1;

    Codes.NUMBER = Codes.WS + 1;

    Codes.BOOL = Codes.NUMBER + 1;

    Codes.DOLLAR = 36;

    Codes.LP = 40;

    Codes.RP = 41;

    Codes.COMA = 44;

    Codes.DOT = 46;

    Codes.COLON = 58;

    Codes.SEMI_COLON = 59;

    Codes.AT = 64;

    Codes.LB = 123;

    Codes.PIPE = 124;

    Codes.RB = 125;

    Codes.byCodes = {};

    Codes.key = function(code) {
      var key;

      for (key in Codes) {
        if (Codes[key] === code) {
          return key;
        }
      }
    };

    return Codes;

  })();

  for (key in Codes) {
    Codes.byCodes[Codes[key]] = Codes[key];
  }

  /*
  
  1. check if word. If word, then eval until /}|,/
  value = parse("name")
  */


  Tokenizer = (function(_super) {
    __extends(Tokenizer, _super);

    function Tokenizer() {
      _ref = Tokenizer.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    Tokenizer.prototype.codes = Codes;

    Tokenizer.codes = Codes;

    /*
    */


    Tokenizer.prototype._next = function() {
      var buffer, c, ccode, cscode, word;

      if (this._s.isAZ() || (ccode = this._s.ccode()) === 36 || ccode === 95 || ccode === 64) {
        word = this._s.next(/[_$@a-zA-Z0-9]+/);
        if (/true|false/.test(word)) {
          return this._t(Codes.BOOL, word);
        }
        return this._t(Codes.VAR, word);
      } else if (ccode === 39 || ccode === 34) {
        this._s.skipWhitespace(false);
        buffer = [];
        while ((c = this._s.nextChar()) && !this._s.eof()) {
          cscode = this._s.ccode();
          if (cscode === 92) {
            buffer.push(this._s.nextChar());
            continue;
          }
          if (cscode === ccode) {
            break;
          }
          buffer.push(c);
        }
        this._s.skipWhitespace(true);
        return this._t(Codes.STRING, buffer.join(""));
      } else if (this._s.is09()) {
        return this._t(Codes.NUMBER, this._s.nextNumber());
      } else if (this._s.isWs()) {
        return this._t(Codes.WS, this._s.next(/[\s\r\n\t]+/));
      } else if (Codes.byCodes[ccode]) {
        return this._t(Codes.byCodes[ccode], this._s.cchar());
      }
    };

    return Tokenizer;

  })(BaseTokenizer);

  module.exports = Tokenizer;

}).call(this);
