// Generated by CoffeeScript 1.6.2
(function() {
  var ActionExpression, Evaluator, base, events,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  base = require("./base");

  events = require("events");

  Evaluator = (function(_super) {
    __extends(Evaluator, _super);

    function Evaluator() {
      Evaluator.__super__.constructor.apply(this, arguments);
      this._em = new events.EventEmitter();
      this.name = this.expr.name;
      this.options = this.linkChild(this.expr.options.evaluate(this.clip));
      this.init();
    }

    Evaluator.prototype.bind = function(to) {
      this._em.on("change", to);
      if (this._currentValue !== void 0) {
        return to(this._currentValue);
      }
    };

    Evaluator.prototype.init = function() {
      this._compile();
      return Evaluator.__super__.init.call(this);
    };

    Evaluator.prototype.toString = function() {
      return this.options.toString();
    };

    Evaluator.prototype._evaluate = function() {};

    Evaluator.prototype._compile = function() {
      var fn,
        _this = this;

      fn = eval("(function(){ return " + (this.toString()) + " })");
      return this._evalFn = function() {
        return fn.call(_this.clip);
      };
    };

    Evaluator.prototype._change = function() {
      Evaluator.__super__._change.call(this);
      return this._em.emit("change", this._currentValue = this._evalFn());
    };

    return Evaluator;

  })(base.Evaluator);

  ActionExpression = (function() {
    ActionExpression.prototype._type = "action";

    /*
    */


    function ActionExpression(name, options) {
      this.name = name;
      this.options = options;
    }

    /*
    */


    ActionExpression.prototype.evaluate = function(context) {
      return new Evaluator(this, context);
    };

    return ActionExpression;

  })();

  module.exports = ActionExpression;

}).call(this);
