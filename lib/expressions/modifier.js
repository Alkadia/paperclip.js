// Generated by CoffeeScript 1.6.2
(function() {
  var Evaluator, ModifierExpression, base,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  base = require("./base");

  Evaluator = (function(_super) {
    __extends(Evaluator, _super);

    function Evaluator() {
      Evaluator.__super__.constructor.apply(this, arguments);
      this.name = this.expr.name;
      this.params = this.linkChild(this.expr.params.evaluate(this.clip));
    }

    Evaluator.prototype.init = function() {
      return Evaluator.__super__.init.call(this);
    };

    Evaluator.prototype.map = function(value, callback) {
      var modifier, params;

      modifier = this.clip.modifiers[this.name];
      if (!modifier) {
        return value;
      }
      params = this.params.items.map(function(item) {
        return item.value();
      });
      params.unshift(value);
      return modifier.apply(this, params);
    };

    return Evaluator;

  })(base.Evaluator);

  ModifierExpression = (function() {
    ModifierExpression.prototype._type = "modifier";

    function ModifierExpression(name, params) {
      this.name = name;
      this.params = params;
    }

    ModifierExpression.prototype.evaluate = function(context) {
      return new Evaluator(this, context);
    };

    return ModifierExpression;

  })();

  module.exports = ModifierExpression;

}).call(this);
