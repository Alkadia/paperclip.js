// Generated by CoffeeScript 1.6.2
(function() {
  var CollectionExpression, RefPathExpression, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CollectionExpression = require("./collection");

  RefPathExpression = (function(_super) {
    __extends(RefPathExpression, _super);

    function RefPathExpression() {
      _ref = RefPathExpression.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RefPathExpression.prototype._type = "refPath";

    RefPathExpression.prototype.references = function() {
      var refs;

      refs = RefPathExpression.__super__.references.call(this);
      refs.push(this);
      return refs;
    };

    RefPathExpression.prototype.toString = function() {
      var buffer, currentChain, part, _i, _len, _ref1;

      buffer = ["this"];
      currentChain = [];
      _ref1 = this.items;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        part = _ref1[_i];
        if (part._type === "fn") {
          if (currentChain.length) {
            buffer.push(".ref('", currentChain.join("."), "')");
          }
          buffer.push(".call('", part.name, "', [");
          buffer.push(part.params.toString(), "])");
          currentChain = [];
        } else {
          currentChain.push(part.name);
        }
      }
      if (currentChain.length) {
        buffer.push(".ref('", currentChain.join("."), "')");
      }
      buffer.push(".value()");
      return buffer.join("");
    };

    return RefPathExpression;

  })(CollectionExpression);

  module.exports = RefPathExpression;

}).call(this);
