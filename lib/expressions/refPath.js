// Generated by CoffeeScript 1.6.2
(function() {
  var CollectionExpression, Evaluator, RefPathExpression, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CollectionExpression = require("./collection");

  Evaluator = (function(_super) {
    __extends(Evaluator, _super);

    function Evaluator() {
      _ref = Evaluator.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Evaluator.prototype.init = function() {
      Evaluator.__super__.init.call(this);
      return this._watch();
    };

    Evaluator.prototype.toString = function() {
      var buffer, currentChain, part, _i, _len, _ref1;

      buffer = ["this"];
      currentChain = [];
      _ref1 = this.items;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        part = _ref1[_i];
        if (part.expr._type === "fn") {
          if (currentChain.length) {
            buffer.push(".ref('", currentChain.join("."), "')");
          }
          buffer.push(".call('", part.name, "', [");
          buffer.push(part.params.toString(), "])");
          currentChain = [];
        } else {
          currentChain.push(part.name);
        }
      }
      if (currentChain.length) {
        buffer.push(".ref('", currentChain.join("."), "')");
      }
      buffer.push(".value()");
      return buffer.join("");
    };

    Evaluator.prototype._watch = function() {
      var cw, part, propertyChain, watchable, _i, _j, _len, _len1, _ref1, _results;

      watchable = [];
      cw = [];
      _ref1 = this.items;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        part = _ref1[_i];
        cw.push(part.name);
        if (part.expr._type === "fn") {
          if (cw.length) {
            watchable.push(cw);
          }
          cw = [];
        }
      }
      if (cw.length) {
        watchable.push(cw);
      }
      _results = [];
      for (_j = 0, _len1 = watchable.length; _j < _len1; _j++) {
        propertyChain = watchable[_j];
        _results.push(this.context.bind(propertyChain.join("."), this._change));
      }
      return _results;
    };

    return Evaluator;

  })(CollectionExpression.Evaluator);

  RefPathExpression = (function(_super) {
    __extends(RefPathExpression, _super);

    function RefPathExpression() {
      _ref1 = RefPathExpression.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    RefPathExpression.prototype._type = "refPath";

    RefPathExpression.prototype.evaluate = function(context) {
      return new Evaluator(this, context);
    };

    return RefPathExpression;

  })(CollectionExpression);

  module.exports = RefPathExpression;

}).call(this);
