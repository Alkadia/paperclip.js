// Generated by CoffeeScript 1.6.2
(function() {
  var Evaluator, ScriptExpression, async, base, events,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  base = require("./base");

  events = require("events");

  async = require("async");

  Evaluator = (function(_super) {
    __extends(Evaluator, _super);

    function Evaluator() {
      Evaluator.__super__.constructor.apply(this, arguments);
      this._em = new events.EventEmitter();
      this.modifiers = this.linkChild(this.expr.modifiers.evaluate(this.clip));
      this.expressions = this.linkChild(this.expr.expressions.evaluate(this.clip));
    }

    /*
    */


    Evaluator.prototype.init = function() {
      this._compile();
      return Evaluator.__super__.init.call(this);
    };

    /*
    */


    Evaluator.prototype.bind = function(to) {
      this._em.on("change", to);
      if (this._currentValue !== void 0) {
        return to(this._currentValue);
      }
    };

    /*
    */


    Evaluator.prototype.toString = function() {
      return this.expressions.toString();
    };

    /*
    */


    Evaluator.prototype.value = function() {
      var modifier, newValue, _i, _len, _ref;

      newValue = this._evalFn();
      _ref = this.modifiers.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        modifier = _ref[_i];
        newValue = modifier.map(newValue);
      }
      return newValue;
    };

    /*
    */


    Evaluator.prototype._compile = function() {
      var fn,
        _this = this;

      fn = eval("(function(){ return " + (this.expressions.toString()) + " })");
      return this._evalFn = function() {
        return fn.call(_this.clip);
      };
    };

    /*
    */


    Evaluator.prototype._change = function() {
      var newValue;

      Evaluator.__super__._change.call(this);
      newValue = this.value();
      if (this._currentValue === newValue) {
        return;
      }
      return this._em.emit("change", this._currentValue = newValue);
    };

    return Evaluator;

  })(base.Evaluator);

  ScriptExpression = (function() {
    ScriptExpression.prototype._type = "script";

    /*
    */


    function ScriptExpression(expressions, modifiers) {
      this.expressions = expressions;
      this.modifiers = modifiers;
    }

    /*
    */


    ScriptExpression.prototype.evaluate = function(context) {
      return new Evaluator(this, context);
    };

    return ScriptExpression;

  })();

  module.exports = ScriptExpression;

}).call(this);
