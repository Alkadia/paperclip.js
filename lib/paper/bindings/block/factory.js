// Generated by CoffeeScript 1.6.2
(function() {
  var Binder, BindingCollection, Clip, Factory, bindingClasses, loaf, _;

  BindingCollection = require("../collection");

  loaf = require("loaf");

  Clip = require("../../../clip");

  _ = require("underscore");

  bindingClasses = {
    html: require("./html"),
    "if": require("./conditional"),
    "else": require("./conditional"),
    elseif: require("./conditional"),
    value: require("./value")
  };

  Binder = (function() {
    /*
    */
    function Binder(options) {
      this.options = options;
    }

    /*
    */


    Binder.prototype.getBinding = function(templateNode) {
      var clazz, cn, index, _i, _len, _ref;

      cn = templateNode;
      while (cn.parentNode) {
        cn = cn.parentNode;
      }
      _ref = this.path();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        index = _ref[_i];
        cn = cn.childNodes[index];
      }
      clazz = this.options["class"];
      return new clazz(_.extend({}, this.options, {
        section: loaf(this.options.section.nodeFactory, cn, cn.nextSibling),
        clip: new Clip({
          script: this.options.script,
          watch: false
        })
      }));
    };

    /*
    */


    Binder.prototype.path = function() {
      var cn, paths;

      if (this._path) {
        return this._path;
      }
      paths = [];
      cn = this.options.section.start;
      while (cn.parentNode) {
        paths.unshift(Array.prototype.slice.call(cn.parentNode.childNodes, 0).indexOf(cn));
        cn = cn.parentNode;
      }
      return this._path = paths;
    };

    return Binder;

  })();

  Factory = (function() {
    function Factory() {}

    /*
    */


    Factory.prototype.getBindings = function(options) {
      var bd, bindings, clipScriptNames, scriptName, _i, _len;

      bindings = [];
      clipScriptNames = options.clip.scripts.names;
      for (_i = 0, _len = clipScriptNames.length; _i < _len; _i++) {
        scriptName = clipScriptNames[_i];
        if (bd = bindingClasses[scriptName]) {
          options.scriptName = scriptName;
          bindings.push(new bd(options));
        }
      }
      return bindings;
    };

    /*
    */


    Factory.prototype.getBinders = function(options) {
      var bd, binders, clipScriptNames, scriptName, _i, _len;

      binders = [];
      clipScriptNames = options.script.fn ? ["value"] : Object.keys(options.script);
      for (_i = 0, _len = clipScriptNames.length; _i < _len; _i++) {
        scriptName = clipScriptNames[_i];
        if (bd = bindingClasses[scriptName]) {
          options.scriptName = scriptName;
          options["class"] = bd;
          if (typeof bd.prepare === "function") {
            bd.prepare(options);
          }
          binders.push(new Binder(options));
        }
      }
      return binders;
    };

    /*
    */


    Factory.prototype.register = function(name, bindingClass) {
      return bindingClasses[name] = bindingClass;
    };

    return Factory;

  })();

  module.exports = new Factory();

}).call(this);
