// Generated by CoffeeScript 1.6.2
var NodeBindingFactory, allBindingClasses, nodeFactory;

allBindingClasses = {
  node: {},
  attr: {
    "default": []
  }
};

NodeBindingFactory = (function() {
  function NodeBindingFactory() {}

  /*
  */


  NodeBindingFactory.prototype.getBindings = function(options) {
    var attrName, attributes, bindable, bindables, bindingClass, bindingClasses, bindings, node, nodeName, _i, _j, _len, _len1;

    bindings = [];
    attributes = options.attributes;
    nodeName = options.nodeName;
    node = options.node;
    bindables = [
      {
        name: nodeName,
        key: nodeName,
        value: node,
        type: "node",
        node: node
      }, {
        name: nodeName,
        key: "default",
        value: node,
        type: "node",
        node: node
      }
    ];
    for (attrName in attributes) {
      bindables.push({
        node: node,
        name: attrName,
        key: attrName,
        value: attributes[attrName],
        type: "attr"
      });
      bindables.push({
        node: node,
        name: attrName,
        key: "default",
        value: attributes[attrName],
        type: "attr"
      });
    }
    for (_i = 0, _len = bindables.length; _i < _len; _i++) {
      bindable = bindables[_i];
      bindingClasses = allBindingClasses[bindable.type][bindable.key] || [];
      for (_j = 0, _len1 = bindingClasses.length; _j < _len1; _j++) {
        bindingClass = bindingClasses[_j];
        if (bindingClass.test(bindable.value)) {
          bindings.push(new bindingClass(bindable));
        }
      }
    }
    return bindings;
  };

  /*
  */


  NodeBindingFactory.prototype.register = function(name, bindingClass) {
    var classes;

    if (!/node|attr/.test(String(bindingClass.type))) {
      throw new Error("node binding class \"" + bindingClass.name + "\" must have a type 'node', or 'attr'");
    }
    classes = allBindingClasses[bindingClass.type];
    if (!bindingClass.test) {
      bindingClass.test = function() {
        return true;
      };
    }
    if (!classes[name]) {
      classes[name] = [];
    }
    classes[name].push(bindingClass);
    return this;
  };

  return NodeBindingFactory;

})();

nodeFactory = module.exports = new NodeBindingFactory();

nodeFactory.register("default", require("./attrs/text"));
