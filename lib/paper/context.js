// Generated by CoffeeScript 1.6.2
var Context, bindable, pilot,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

bindable = require("bindable");

pilot = require("pilot-block");

Context = (function(_super) {
  __extends(Context, _super);

  /*
  */


  function Context(data, parent) {
    var _ref, _ref1;

    this.parent = parent;
    Context.__super__.constructor.call(this, data);
    this.set("this", this);
    this.root = ((_ref = this.parent) != null ? _ref.root : void 0) || this;
    this.buffer = ((_ref1 = this.parent) != null ? _ref1.buffer : void 0) || [];
    this.internal = this.root.internal || new bindable.Object();
  }

  /*
  */


  Context.prototype.get = function(key) {
    var _ref, _ref1;

    return (_ref = Context.__super__.get.call(this, key)) != null ? _ref : (_ref1 = this.parent) != null ? _ref1.get(key) : void 0;
  };

  /*
  */


  /*
  bind: (key) ->
    return super(key) if (typeof key isnt "string") or @has(key)
    if @has(key)
      @parent?.bind key
  */


  /*
  */


  Context.prototype.child = function(data) {
    if (data == null) {
      data = {};
    }
    return new Context(data, this);
  };

  /*
  */


  Context.prototype.detachBuffer = function() {
    this.buffer = [];
    return this;
  };

  /*
  */


  Context.prototype.attachBuffer = function() {
    this.buffer = this.root.buffer || this.buffer;
    return this;
  };

  return Context;

})(bindable.Object);

module.exports = Context;
