// Generated by CoffeeScript 1.6.2
var EachDecor, pilot,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

pilot = require("pilot-block");

EachDecor = (function(_super) {
  __extends(EachDecor, _super);

  /*
  */


  function EachDecor() {
    this._remove = __bind(this._remove, this);
    this._insert = __bind(this._insert, this);    EachDecor.__super__.constructor.apply(this, arguments);
  }

  /*
  */


  EachDecor.prototype.bind = function() {
    var child, _i, _len, _ref, _ref1;

    EachDecor.__super__.bind.call(this);
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child.bind();
    }
    if ((_ref1 = this.script.value) != null ? _ref1.source : void 0) {
      this._ignoreInsert = true;
      this.script.value.bind({
        insert: this._insert,
        remove: this._remove
      }).now();
      return this._ignoreInsert = false;
    }
  };

  /*
  */


  EachDecor.prototype.load = function(stream) {
    var child, model, source, _i, _j, _len, _len1, _ref, _ref1, _results;

    this.stream = stream;
    this.children = [];
    source = ((_ref = this.script.value) != null ? _ref.source : void 0) ? this.script.value.source() : this.script.value || [];
    for (_i = 0, _len = source.length; _i < _len; _i++) {
      model = source[_i];
      this.children.push(this._createChild(model));
    }
    _ref1 = this.children;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      child = _ref1[_j];
      _results.push(child.load(context));
    }
    return _results;
  };

  /*
  */


  EachDecor.prototype._createChild = function(model) {
    var data, node;

    data = {};
    data[this.node.clip.get("as") || "model"] = model;
    node = this.node.createContent(data);
    node.model = model;
    return node;
  };

  /*
  */


  EachDecor.prototype._insert = function(model) {
    var node;

    if (this._ignoreInsert) {
      return;
    }
    this.children.push(node = this._createChild(model));
    return node.attach(this.node, this.context);
  };

  /*
  */


  EachDecor.prototype._remove = function(model) {
    var child, i, _i, _len, _ref, _results;

    _ref = this.children;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      child = _ref[i];
      if (child.model === model) {
        this.children.splice(i, 1);
        child.dispose();
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return EachDecor;

})(require("./base"));

module.exports = EachDecor;
