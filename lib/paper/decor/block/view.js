// Generated by CoffeeScript 1.6.2
var Context, ViewDecor, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Context = require("../../context");

ViewDecor = (function(_super) {
  __extends(ViewDecor, _super);

  function ViewDecor() {
    _ref = ViewDecor.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  /*
  */


  ViewDecor.prototype.bind = function() {
    ViewDecor.__super__.bind.call(this);
    return this.child.bind();
  };

  /*
  */


  ViewDecor.prototype.dispose = function() {
    ViewDecor.__super__.dispose.call(this);
    return this.child.dispose();
  };

  /*
  */


  ViewDecor.prototype.load = function(context) {
    var child, tpl, tplName, wth;

    tplName = "template." + (this.clip.get("view.name") || this.clip.get("view"));
    wth = this.clip.get("view.model") || void 0;
    tpl = context.internal.get(tplName);
    if (!tpl) {
      return;
    }
    child = new Context({}, context);
    if (this.node.content) {
      this.node.content.load(child);
    }
    child.set("content", child.buffer.join(""));
    child.buffer = context.buffer;
    this.child = tpl.node.createContent();
    return this.child.load(this._childContext = child.child(wth));
  };

  /*
  */


  ViewDecor.prototype._onChange = function() {
    var _ref1;

    return (_ref1 = this._childContext) != null ? _ref1.reset(this.clip.get("view.model")) : void 0;
  };

  return ViewDecor;

})(require("./base"));

module.exports = ViewDecor;
