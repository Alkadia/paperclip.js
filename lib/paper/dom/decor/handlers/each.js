// Generated by CoffeeScript 1.6.2
(function() {
  var Element, Handler, bindable, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  Element = (function() {
    function Element(el, item, idKey, value) {
      this.el = el;
      this.item = item;
      this[idKey] = value;
    }

    return Element;

  })();

  Handler = (function(_super) {
    __extends(Handler, _super);

    function Handler() {
      this._removeElement = __bind(this._removeElement, this);
      this._insertElement = __bind(this._insertElement, this);
      this._change = __bind(this._change, this);      _ref = Handler.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Handler.prototype.traverse = false;

    Handler.prototype.init = function() {
      this.$element = $(this.element);
      this.tpl = this.$element.html();
      this.$element.html("");
      this._source = new bindable.Collection();
      this._watchSource();
      this.clip.bind("each").to(this._change);
      return this.watcher.watch();
    };

    Handler.prototype._change = function(value) {
      return this._source.reset(value);
    };

    Handler.prototype._watchSource = function() {
      var _this = this;

      this._source.transform().map(function(item) {
        var el;

        el = $("<div>" + _this.tpl + "</div>");
        return new Element(el, {
          item: item
        }, _this._source._id(), item[_this._source._id()]);
      });
      return this._source.bind({
        insert: this._insertElement,
        remove: this._removeElement
      });
    };

    Handler.prototype._insertElement = function(element) {
      this.$element.append(element.el);
      return this.dom.attach(element.item, element.el);
    };

    Handler.prototype._removeElement = function(element) {
      return element.el.remove();
    };

    return Handler;

  })(require("./base"));

  module.exports = Handler;

}).call(this);
