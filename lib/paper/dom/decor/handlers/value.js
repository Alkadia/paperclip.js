// Generated by CoffeeScript 1.6.2
(function() {
  var Handler, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Handler = (function(_super) {
    __extends(Handler, _super);

    function Handler() {
      this._onElementChange = __bind(this._onElementChange, this);
      this._onValueChange = __bind(this._onValueChange, this);      _ref = Handler.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Handler.prototype.init = function() {
      this.watcher.watch();
      this.clip.bind("value").to(this._onValueChange);
      return $(this.element).bind("keyup change", this._onElementChange);
    };

    Handler.prototype._onValueChange = function(value) {
      return this.element.value = this.currentValue = value;
    };

    Handler.prototype._onElementChange = function(event) {
      var key, refs, refsByKey, value, _i, _len, _results;

      value = this.element.value;
      if (this.currentValue !== value && (refs = this._bothWays()).length) {
        _results = [];
        for (_i = 0, _len = refs.length; _i < _len; _i++) {
          refsByKey = refs[_i];
          _results.push((function() {
            var _results1;

            _results1 = [];
            for (key in refsByKey) {
              _results1.push(refsByKey[key].value(value));
            }
            return _results1;
          })());
        }
        return _results;
      }
    };

    Handler.prototype._bothWays = function() {
      var refs;

      refs = [];
      if (this.clip.options.bothWays) {
        refs.push(this.clip.options.bothWays);
      }
      return refs;
    };

    return Handler;

  })(require("./base"));

  module.exports = Handler;

}).call(this);
