// Generated by CoffeeScript 1.6.2
var BlockBinding, Fragment, Loader, NodeBinding, StringBuffer, modifiers;

NodeBinding = require("./nodes/nodeBinding");

BlockBinding = require("./nodes/blockBinding");

StringBuffer = require("./nodes/string");

Fragment = require("./nodes/fragment");

modifiers = require("./defaultModifiers");

Loader = (function() {
  function Loader() {}

  /*
  */


  Loader.fragment = function(childNodes) {
    return new Fragment(childNodes);
  };

  /*
  */


  Loader.element = function(name, attrs, childNodes) {
    var options;

    options = {
      attributes: attrs,
      children: childNodes || []
    };
    return new NodeBinding(name, options);
  };

  /*
  */


  Loader.block = function(options, contentTemplate, childTemplate) {
    if (contentTemplate == null) {
      contentTemplate = (function() {});
    }
    if (childTemplate == null) {
      childTemplate = (function() {});
    }
    return new BlockBinding(options, Loader.load(contentTemplate), Loader.load(childTemplate));
  };

  /*
  */


  Loader.text = function(buffer) {
    return new StringBuffer(buffer);
  };

  /*
  */


  Loader.load = function(template) {
    return template(Loader.fragment, Loader.block, Loader.element, Loader.text, modifiers);
  };

  return Loader;

}).call(this);

module.exports = Loader.load;
