// Generated by CoffeeScript 1.6.2
(function() {
  var BinderCollection, BindingCollection, BlockWriter, ElementWriter, FragmentWriter, Loader, ParseWriter, TextWriter, bindable, loaf, modifiers;

  modifiers = require("./modifiers");

  FragmentWriter = require("./writers/fragment");

  BlockWriter = require("./writers/block");

  TextWriter = require("./writers/text");

  ElementWriter = require("./writers/element");

  ParseWriter = require("./writers/parse");

  BindingCollection = require("./bindings/collection");

  BinderCollection = require("./bindings/binders");

  bindable = require("bindable");

  loaf = require("loaf");

  Loader = (function() {
    /*
    */
    Loader.prototype.__isLoader = true;

    /*
    */


    function Loader(template) {
      this.template = template;
      this.application = this.template.application;
      this.nodeFactory = this.application.nodeFactory;
      this.paper = template.paper;
      this.bindings = new BindingCollection();
    }

    /*
    */


    Loader.prototype.load = function(context) {
      if (context == null) {
        context = {};
      }
      if (!context.__isBindable) {
        context = new bindable.Object(context);
      }
      this.context = context;
      this._templateNodeClone = this._createTemplateNodeClone();
      return this;
    };

    /*
     creates
    */


    Loader.prototype._createTemplateNodeClone = function() {
      var node, writers;

      if (this.paper.node) {
        this.binders = this.paper.binders;
        return this.paper.node.cloneNode(true);
      }
      this.binders = new BinderCollection();
      writers = {
        fragment: new FragmentWriter(this),
        block: new BlockWriter(this),
        text: new TextWriter(this),
        element: new ElementWriter(this),
        parse: new ParseWriter(this)
      };
      node = this.paper(writers.fragment.write, writers.block.write, writers.element.write, writers.text.write, writers.parse.write, modifiers);
      this.paper.binders = this.binders;
      this.paper.node = node;
      return this._createTemplateNodeClone();
    };

    /*
    */


    Loader.prototype.bind = function() {
      if (this._bindings) {
        this._bindings.bind(this.context);
        return;
      }
      this._bindings = this.binders.getBindings(this._templateNodeClone);
      this._bindings.bind(this.context);
      this.section = loaf(this.nodeFactory);
      this.section.append(this._templateNodeClone);
      return this;
    };

    /*
    */


    Loader.prototype.render = function() {
      this.section.show();
      return this.section;
    };

    /*
    */


    Loader.prototype.remove = function() {
      this.section.hide();
      return this;
    };

    /*
    */


    Loader.prototype.dispose = function() {
      this.unbind();
      this.section.dispose();
      return this;
    };

    /*
    */


    Loader.prototype.unbind = function() {
      this._bindings.unbind();
      return this;
    };

    /*
    */


    Loader.prototype.toFragment = function() {
      return this.section.toFragment();
    };

    /*
    */


    Loader.prototype.toString = function() {
      var div, frag;

      if (this.nodeFactory.name === "string") {
        return this.section.toString();
      }
      frag = this.section.toFragment();
      div = document.createElement("div");
      div.appendChild(frag.cloneNode(true));
      return div.innerHTML;
    };

    return Loader;

  })();

  module.exports = Loader;

}).call(this);
