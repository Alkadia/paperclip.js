// Generated by CoffeeScript 1.6.2
var Comment, Element, Fragment, StringNodeFactory, Text, bindable, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

bindable = require("bindable");

Element = (function() {
  /*
  */
  Element.prototype.nodeType = 3;

  /*
  */


  function Element(name) {
    this.name = name;
    this.attributes = {};
    this.childNodes = [];
  }

  /*
  */


  Element.prototype.setAttribute = function(name, value) {
    return this.attributes[name] = value;
  };

  /*
  */


  Element.prototype.appendChild = function(node) {
    var child, _i, _len, _ref;

    if (node.nodeType === 11) {
      _ref = node.childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        this.appendChild(child);
      }
      return;
    }
    node.parentNode = this;
    return this.childNodes.push(node);
  };

  /*
  */


  Element.prototype.insertBefore = function(newElement, before) {
    var i;

    i = this.childNodes.indexOf(before);
    if (!~i) {
      return;
    }
    return this.childNodes.splice(i, 0, newElement);
  };

  /*
  */


  Element.prototype.toString = function() {
    var buffer, name;

    buffer = ["<", this.name];
    for (name in this.attributes) {
      buffer.push(name + "=" + attributes[name]);
    }
    buffer.push(">");
    buffer.push.apply(buffer, this.childNodes);
    buffer.push("<", this.name, "/>");
    return buffer.join("");
  };

  return Element;

})();

Text = (function() {
  /*
  */
  Text.prototype.nodeType = 3;

  /*
  */


  function Text(value) {
    this.value = value;
  }

  /*
  */


  Text.prototype.toString = function() {
    return this.value;
  };

  return Text;

})();

Comment = (function(_super) {
  __extends(Comment, _super);

  function Comment() {
    _ref = Comment.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  /*
  */


  Comment.prototype.nodeType = 8;

  /*
  */


  Comment.prototype.toString = function() {
    return "<!--" + (Comment.__super__.toString.call(this)) + "-->";
  };

  return Comment;

})(Text);

Fragment = (function() {
  /*
  */
  Fragment.prototype.nodeType = 11;

  /*
  */


  function Fragment() {
    this._children = [];
  }

  /*
  */


  Fragment.prototype.appendChild = function(child) {
    return this._children.push(child);
  };

  /*
  */


  Fragment.prototype.toString = function() {
    return this._children.join("");
  };

  return Fragment;

})();

StringNodeFactory = (function() {
  /*
  */
  function StringNodeFactory(context) {
    this.context = context;
    this.internal = new bindable.Object();
  }

  /*
  */


  StringNodeFactory.prototype.createElement = function(name) {
    return new Element(name);
  };

  /*
  */


  StringNodeFactory.prototype.createTextNode = function(text) {
    return new Text(text);
  };

  /*
  */


  StringNodeFactory.prototype.createComment = function(text) {
    return new Comment(text);
  };

  /*
  */


  StringNodeFactory.prototype.createFragment = function() {
    var child, frag, _i, _len;

    frag = new Fragment();
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      child = arguments[_i];
      frag.appendChild(child);
    }
    return frag;
  };

  return StringNodeFactory;

})();

module.exports = function(context) {
  return new StringNodeFactory(context);
};
