// Generated by CoffeeScript 1.6.2
var Base, BlockBinding, BlockChild, Clip, decorFactory,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Base = require("./base");

decorFactory = require("../decor/blockFactory");

Clip = require("../../clip");

BlockChild = (function(_super) {
  __extends(BlockChild, _super);

  /*
  */


  function BlockChild(block, _with) {
    this.block = block;
    this["with"] = _with;
    BlockChild.__super__.constructor.call(this);
    this.content = this.block.contentFactory();
  }

  /*
  */


  BlockChild.prototype.bind = function() {
    BlockChild.__super__.bind.call(this);
    this.content.bind();
    return this;
  };

  /*
  */


  BlockChild.prototype.dispose = function() {
    BlockChild.__super__.dispose.call(this);
    this.content.dispose();
    return this;
  };

  /*
  */


  BlockChild.prototype.load = function(context) {
    if (!this["with"]) {
      return BlockChild.__super__.load.call(this, context);
    }
    return BlockChild.__super__.load.call(this, context.child(this["with"]));
  };

  /*
  */


  BlockChild.prototype._loadChildren = function(context) {
    return this.content.load(context);
  };

  return BlockChild;

})(require("./bindable"));

BlockBinding = (function(_super) {
  __extends(BlockBinding, _super);

  /*
  */


  BlockBinding.prototype.name = "block";

  /*
  */


  function BlockBinding(script, contentFactory, childBinding) {
    this.script = script;
    this.contentFactory = contentFactory;
    this.childBinding = childBinding;
    BlockBinding.__super__.constructor.call(this);
    this.clip = new Clip({
      script: script,
      watch: false
    });
    this._decor = decorFactory.getDecor(this);
  }

  /*
  */


  BlockBinding.prototype.bind = function() {
    BlockBinding.__super__.bind.call(this);
    this.clip.watch();
    return this._decor.bind();
  };

  /*
  */


  BlockBinding.prototype.dispose = function() {
    this.clip.dispose();
    this._decor.dispose();
    return BlockBinding.__super__.dispose.call(this);
  };

  /*
  */


  BlockBinding.prototype.createContent = function(wth) {
    return new BlockChild(this, wth);
  };

  /*
  */


  BlockBinding.prototype.load = function(stream) {
    this.clip.reset(stream.context);
    this.clip.update();
    return BlockBinding.__super__.load.call(this, stream);
  };

  /*
  */


  BlockBinding.prototype._loadChildren = function(context) {
    return this._decor.load(context);
  };

  /*
  */


  BlockBinding.prototype.clone = function() {
    return new BlockBinding(this.script, Base.cloneEach(this.children));
  };

  return BlockBinding;

})(require("./bindable"));

module.exports = BlockBinding;
