// Generated by CoffeeScript 1.6.2
(function() {
  var Clip, Parser, Template, TemplateBinding, TemplateWatcher, expr, parser,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Parser = require("./parser");

  Clip = require("../../clip");

  parser = new Parser();

  expr = parser.parse("hello, how are you {{person.name}}, how old is your {{person.sibling}}?");

  TemplateBinding = (function() {
    /*
    */
    function TemplateBinding(templateWatcher, fn) {
      this.templateWatcher = templateWatcher;
      this.fn = fn;
      this.update = __bind(this.update, this);
      this.clip = new Clip({
        script: this.fn,
        data: this.templateWatcher.data
      });
      this.clip.bind("value").watch(true).to(this.update);
      this.value = this.clip.get("value");
    }

    /*
    */


    TemplateBinding.prototype.dispose = function() {
      return this.clip.dispose();
    };

    /*
    */


    TemplateBinding.prototype.update = function(value) {
      this.value = value;
      return this.templateWatcher.update();
    };

    /*
    */


    TemplateBinding.prototype.toString = function() {
      return this.value;
    };

    return TemplateBinding;

  })();

  TemplateWatcher = (function() {
    /*
    */
    function TemplateWatcher(data, fn) {
      this.data = data;
      this.fn = fn;
      this.buffer = [];
      this._bindings = [];
      this.fn.call(this);
      this.update();
    }

    /*
    */


    TemplateWatcher.prototype.dispose = function() {
      var binding, _i, _len, _ref;

      _ref = this._bindings;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        binding = _ref[_i];
        binding.dispose();
      }
      return this._bindings = [];
    };

    /*
    */


    TemplateWatcher.prototype.push = function(source) {
      this.buffer.push(source);
      return this;
    };

    /*
    */


    TemplateWatcher.prototype.bind = function(script) {
      this.buffer.push(new TemplateBinding(this, script));
      return this;
    };

    /*
    */


    TemplateWatcher.prototype.update = function() {
      return this.text = this.render();
    };

    /*
    */


    TemplateWatcher.prototype.render = function() {
      return this.buffer.join("");
    };

    /*
    */


    TemplateWatcher.prototype.toString = function() {
      return this.text;
    };

    return TemplateWatcher;

  })();

  Template = (function() {
    /*
    */
    function Template(source) {
      this.fn = new Function("return " + parser.parse(source));
    }

    /*
    */


    Template.prototype.render = function(data) {
      return new TemplateWatcher(data, this.fn);
    };

    return Template;

  })();

  module.exports = Template;

}).call(this);
