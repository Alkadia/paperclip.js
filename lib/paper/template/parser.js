// Generated by CoffeeScript 1.6.2
var BaseParser, BlockExpression, CollectionExpression, Parser, StringExpression, TokenCodes, Tokenizer,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Tokenizer = require("./tokenizer");

TokenCodes = Tokenizer.Codes;

BaseParser = require("../../base/parser");

BlockExpression = require("./expressions/block");

StringExpression = require("./expressions/string");

CollectionExpression = require("./expressions/collection");

Parser = (function(_super) {
  __extends(Parser, _super);

  /*
  */


  function Parser() {
    this._t = new Tokenizer();
  }

  /*
  */


  Parser.prototype._parse = function() {
    var expressions;

    expressions = [];
    this._nextCode();
    while (this._t.current) {
      expressions.push(this._parseExpression());
    }
    return new CollectionExpression(expressions);
  };

  /*
  */


  Parser.prototype._parseExpression = function() {
    if (this._currentCode() === TokenCodes.LM) {
      return this._parseBlock();
    } else {
      return this._parseString();
    }
  };

  /*
   parses a template block
  */


  Parser.prototype._parseBlock = function() {
    var buffer, c;

    buffer = [];
    this._nextCode();
    while ((c = this._currentCode()) !== TokenCodes.RM && c) {
      if (c === TokenCodes.LM) {
        buffer.push("{{", this._parseBlock().value, "}}");
      } else {
        buffer.push(this._currentString());
      }
      this._nextCode();
    }
    this._nextCode();
    return new BlockExpression(buffer.join(""));
  };

  /*
   parses anything other than {{ }} blocks
  */


  Parser.prototype._parseString = function() {
    var buffer, c;

    buffer = [this._currentString()];
    this._nextCode();
    while ((c = this._currentCode()) !== TokenCodes.LM && c) {
      buffer.push(this._currentString());
      this._nextCode();
    }
    return new StringExpression(buffer.join(""));
  };

  return Parser;

})(BaseParser);

module.exports = Parser;
