// Generated by CoffeeScript 1.6.2
var Base, async;

async = require("async");

Base = (function() {
  /*
  */
  Base.prototype.__isNode = true;

  /*
  */


  function Base() {
    this.children = [];
  }

  /*
  */


  Base.prototype.bind = function() {
    var child, _i, _len, _ref;

    _ref = this.children || [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child.bind();
    }
    return this;
  };

  /*
  */


  Base.prototype.dispose = function() {
    var child, _i, _len, _ref, _results;

    _ref = this.children || [];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      _results.push(child.dispose());
    }
    return _results;
  };

  /*
  */


  Base.prototype.load = function(context) {
    this.context = context;
    this.node = this.createNode(this.paper.nodeFactory);
    this._loadChildren(context);
    return this;
  };

  /*
  */


  Base.prototype._loadChildren = function(context) {
    var child, _i, _len, _ref, _results;

    _ref = this.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      _results.push(this.node.appendChild(child.load(context).node));
    }
    return _results;
  };

  /*
  */


  Base.prototype.addChild = function() {
    var child, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      child = arguments[_i];
      child.parent = this;
      child.paper = this.paper;
      _results.push(this.children.push(child));
    }
    return _results;
  };

  /*
  */


  Base.prototype.createNode = function(nodeFactory) {
    return nodeFactory.createElement("div");
  };

  /*
  */


  Base.prototype.toString = function() {
    return this.node.toString();
  };

  /*
   used mostly for block bindings
  */


  Base.cloneEach = function(source) {
    var item, items, _i, _len;

    items = [];
    for (_i = 0, _len = source.length; _i < _len; _i++) {
      item = source[_i];
      items.push(item.clone());
    }
    return items;
  };

  return Base;

})();

module.exports = Base;
