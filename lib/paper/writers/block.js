// Generated by CoffeeScript 1.6.2
var Base, BlockBinding, BlockChild, Clip, decorFactory,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Base = require("./base");

decorFactory = require("../decor/blockFactory");

Clip = require("../../clip");

BlockChild = (function(_super) {
  __extends(BlockChild, _super);

  /*
  */


  function BlockChild(block, _with) {
    this.block = block;
    this["with"] = _with;
    BlockChild.__super__.constructor.call(this);
    this.content = this.block.contentFactory();
  }

  /*
  */


  BlockChild.prototype.bind = function() {
    BlockChild.__super__.bind.call(this);
    this.content.bind();
    return this;
  };

  /*
  */


  BlockChild.prototype.unbind = function() {
    return BlockChild.__super__.unbind.call(this);
  };

  /*
  */


  BlockChild.prototype.unbind = function() {
    BlockChild.__super__.unbind.call(this);
    this.content.unbind();
    return this;
  };

  /*
  */


  BlockChild.prototype.load = function(context) {
    if (!this["with"]) {
      return BlockChild.__super__.load.call(this, context);
    }
    return BlockChild.__super__.load.call(this, paper.child(this["with"]));
  };

  /*
  */


  BlockChild.prototype._loadChildren = function(context) {
    return this.content.load(context);
  };

  return BlockChild;

})(require("./base"));

BlockBinding = (function(_super) {
  __extends(BlockBinding, _super);

  /*
  */


  BlockBinding.prototype.name = "block";

  /*
  */


  function BlockBinding(script, contentFactory, childBinding) {
    this.script = script;
    this.contentFactory = contentFactory;
    this.childBinding = childBinding;
    BlockBinding.__super__.constructor.call(this);
    this.clip = new Clip({
      script: script,
      watch: false
    });
    this._decor = decorFactory.getDecor(this);
  }

  /*
  */


  BlockBinding.prototype.bind = function() {
    BlockBinding.__super__.bind.call(this);
    this.clip.watch();
    return this._decor.bind();
  };

  /*
  */


  BlockBinding.prototype.unbind = function() {
    this.clip.unwatch();
    this._decor.unbind();
    return BlockBinding.__super__.unbind.call(this);
  };

  /*
  */


  BlockBinding.prototype.createContent = function(wth) {
    return new BlockChild(this, wth);
  };

  /*
  */


  BlockBinding.prototype.replaceAll = function() {
    var firstNode, newFragment, oldNodes, rmNode, _i, _len, _ref, _results;

    this.node = newFragment = arguments.length > 1 ? (_ref = this.context.nodeFactory).createFragment.apply(_ref, arguments) : arguments[0];
    firstNode = this.nodes[0];
    oldNodes = this.nodes;
    this.nodes = arguments;
    if (!firstNode.parentNode) {
      return;
    }
    firstNode.parentNode.insertBefore(newFragment, firstNode);
    _results = [];
    for (_i = 0, _len = oldNodes.length; _i < _len; _i++) {
      rmNode = oldNodes[_i];
      _results.push(rmNode.parentNode.removeChild(rmNode));
    }
    return _results;
  };

  /*
  */


  BlockBinding.prototype.removeAll = function() {
    return this.replaceAll(this.context.nodeFactory.createComment("block"));
  };

  /*
  */


  BlockBinding.prototype.load = function(context) {
    this.clip.reset(context);
    this.clip.update();
    return BlockBinding.__super__.load.call(this, context);
  };

  /*
  */


  BlockBinding.prototype._loadChildren = function(context) {
    return this._decor.load(context);
  };

  /*
  */


  BlockBinding.prototype.clone = function() {
    return new BlockBinding(this.script, Base.cloneEach(this.children));
  };

  /*
  */


  BlockBinding.prototype.createNode = function(nodeFactory) {
    var node;

    node = nodeFactory.createComment("block");
    this.nodes = [node];
    return node;
  };

  return BlockBinding;

})(require("./base"));

module.exports = function(script, contentFactory, childBinding) {
  return new BlockBinding(script, contentFactory, childBinding);
};
