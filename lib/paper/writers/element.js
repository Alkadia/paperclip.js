// Generated by CoffeeScript 1.6.2
var Base, ClippedBuffer, NodeBinding, async, attrFactory,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

async = require("async");

ClippedBuffer = require("../../clip/buffer");

Base = require("./base");

attrFactory = require("../decor/attrFactory");

NodeBinding = (function(_super) {
  __extends(NodeBinding, _super);

  /*
  */


  NodeBinding.prototype.name = "element";

  /*
  */


  function NodeBinding(name, options) {
    this.name = name;
    if (options == null) {
      options = {};
    }
    this.bind = __bind(this.bind, this);
    NodeBinding.__super__.constructor.call(this);
    this.options = options;
    this.attributes = options.attrs || {};
    this._decor = attrFactory.getDecor(this);
    if (options.children) {
      this.addChild.apply(this, options.children);
    }
  }

  /*
  */


  NodeBinding.prototype.bind = function() {
    NodeBinding.__super__.bind.call(this);
    this._decor.bind();
    return this;
  };

  /*
  */


  NodeBinding.prototype._load = function(paper) {
    this.node = paper.createElement(this.name);
    return NodeBinding.__super__._load.call(this, context);
  };

  /*
  */


  NodeBinding.prototype.unbind = function() {
    NodeBinding.__super__.unbind.call(this);
    this._decor.unbind();
    return this;
  };

  /*
  */


  NodeBinding.prototype._loadChildren = function(paper) {
    this._decor.load(paper.context);
    return NodeBinding.__super__._loadChildren.call(this, paper);
  };

  /*
  */


  NodeBinding.prototype.clone = function() {
    return new NodeBinding(this.name, this.options);
  };

  /*
  */


  NodeBinding.prototype.createNode = function(nodeFactory) {
    return nodeFactory.createElement(this.name);
  };

  return NodeBinding;

})(require("./base"));

module.exports = function(name, options) {
  return new NodeBinding(name, options);
};
