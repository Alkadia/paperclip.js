// Generated by CoffeeScript 1.6.2
var Element, Section, StringWriter, Text, bindable;

bindable = require("bindable");

Element = (function() {
  /*
  */
  function Element(name) {
    this.name = name;
    this.attributes = {};
    this.childNodes = [];
  }

  /*
  */


  Element.prototype.setAttribute = function(name, value) {
    return this.attributes[name] = value;
  };

  /*
  */


  Element.prototype.appendChild = function(node) {
    return this.childNodes.push(node);
  };

  /*
  */


  Element.prototype.toString = function() {
    var buffer, name;

    buffer = ["<", this.name];
    for (name in this.attributes) {
      buffer.push(name + "=" + attributes[name]);
    }
    buffer.push(">");
    buffer.push.apply(buffer, this.childNodes);
    buffer.push("<", this.name, "/>");
    return buffer.join("");
  };

  return Element;

})();

Text = (function() {
  /*
  */
  function Text(value) {
    this.value = value;
  }

  /*
  */


  Text.prototype.toString = function() {
    return this.value;
  };

  return Text;

})();

Section = (function() {
  /*
  */
  function Section() {
    this._children = [];
  }

  /*
  */


  Section.prototype.appendChild = function(child) {
    return this._children.push(child);
  };

  /*
  */


  Section.prototype.toString = function() {
    return this._children.join("");
  };

  return Section;

})();

StringWriter = (function() {
  /*
  */
  function StringWriter(context) {
    this.context = context;
    this.internal = new bindable.Object();
  }

  /*
  */


  StringWriter.prototype.createElement = function(name) {
    return new Element(name);
  };

  /*
  */


  StringWriter.prototype.createTextNode = function(text) {
    return new Text(text);
  };

  /*
  */


  StringWriter.prototype.createSection = function() {
    return new Section();
  };

  return StringWriter;

})();

module.exports = function(context) {
  return new StringWriter(context);
};
