// Generated by CoffeeScript 1.6.2
var AttributeBinding, Base, ClippedBuffer, NodeBinding, async, utils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

async = require("async");

ClippedBuffer = require("../../../clip/buffer");

Base = require("./base");

utils = require("./utils");

AttributeBinding = (function(_super) {
  __extends(AttributeBinding, _super);

  /*
  */


  function AttributeBinding(name, buffer) {
    this.name = name;
    AttributeBinding.__super__.constructor.call(this);
    this.clippedBuffer = new ClippedBuffer(buffer);
  }

  /*
  */


  AttributeBinding.prototype.load = function(info, callback) {
    this.clippedBuffer.reset(info.data);
    if (this.clippedBuffer.text.length) {
      info.buffer.push(" " + this.name + "=\"" + this.clippedBuffer.text + "\"");
    }
    return callback();
  };

  return AttributeBinding;

})(Base);

NodeBinding = (function(_super) {
  __extends(NodeBinding, _super);

  /*
  */


  NodeBinding.prototype.name = "nodeBinding";

  /*
  */


  function NodeBinding(name, options) {
    var attrs, attrsArray, key;

    this.name = name;
    this.options = options != null ? options : {};
    NodeBinding.__super__.constructor.call(this);
    attrs = options.attrs || {};
    attrsArray = [];
    for (key in attrs) {
      attrsArray.push(new AttributeBinding(key, attrs[key]));
    }
    this.attrs = attrsArray;
    if (options.children) {
      this.addChild(options.children);
    }
  }

  /*
  */


  NodeBinding.prototype._writeHead = function(info, callback) {
    info.buffer.push("<" + this.name);
    utils.startBindingBlock(this, info);
    return Base.loadEachItem(this.attrs, info, function() {
      info.buffer.push(">");
      return callback();
    });
  };

  /*
  */


  NodeBinding.prototype._writeTail = function(info, callback) {
    info.buffer.push("</" + this.name + ">");
    utils.endBindingBlock(this, info);
    return NodeBinding.__super__._writeTail.call(this, info, callback);
  };

  /*
  */


  NodeBinding.prototype.clone = function() {
    return new NodeBinding(this.name, this.options);
  };

  return NodeBinding;

})(Base);

module.exports = NodeBinding;
