// Generated by CoffeeScript 1.6.2
var EachDecor, EachNode, async, pilot,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

async = require("async");

pilot = require("pilot-block");

EachNode = (function(_super) {
  __extends(EachNode, _super);

  /*
  */


  function EachNode(item, block, itemName) {
    this.item = item;
    this.block = block;
    this.itemName = itemName != null ? itemName : "item";
    EachNode.__super__.constructor.call(this);
    this.content = this.block.contentFactory();
  }

  /*
  */


  EachNode.prototype.bind = function() {
    EachNode.__super__.bind.call(this);
    return this.content.bind();
  };

  /*
  */


  EachNode.prototype.load = function(context, callback) {
    var data;

    data = {};
    data[this.itemName] = this.item;
    return EachNode.__super__.load.call(this, context.child(data), callback);
  };

  /*
  */


  EachNode.prototype._loadChildren = function(context, callback) {
    return this.content.load(context, callback);
  };

  return EachNode;

})(require("../../nodes/bindable"));

EachDecor = (function(_super) {
  __extends(EachDecor, _super);

  /*
  */


  EachDecor.scriptName = "each";

  /*
  */


  function EachDecor() {
    this._remove = __bind(this._remove, this);
    this._insert = __bind(this._insert, this);    EachDecor.__super__.constructor.apply(this, arguments);
  }

  /*
  */


  EachDecor.prototype.bind = function() {
    var child, _i, _len, _ref, _ref1;

    EachDecor.__super__.bind.call(this);
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      child.bind();
    }
    if ((_ref1 = this.script.value) != null ? _ref1.source : void 0) {
      this._ignoreInsert = true;
      this.script.value.bind({
        insert: this._insert,
        remove: this._remove
      });
      return this._ignoreInsert = false;
    }
  };

  /*
  */


  EachDecor.prototype.load = function(context, callback) {
    var item, source, _i, _len, _ref;

    this.context = context;
    this.children = [];
    this.itemName = this.node.clip.get("as") || "item";
    source = ((_ref = this.script.value) != null ? _ref.source : void 0) ? this.script.value.source() : this.script.value || [];
    for (_i = 0, _len = source.length; _i < _len; _i++) {
      item = source[_i];
      this.children.push(new EachNode(item, this.node, this.itemName));
    }
    return async.eachSeries(this.children, (function(child, next) {
      return child.load(context, next);
    }), callback);
  };

  /*
  */


  EachDecor.prototype._insert = function(item) {
    var context, node,
      _this = this;

    if (this._ignoreInsert) {
      return;
    }
    this.children.push(node = new EachNode(item, this.node, this.itemName));
    return node.load(context = this.context.child().detachBuffer(), function(err) {
      if (err != null) {
        return;
      }
      _this.node.section.append(pilot.createSection(context.buffer.join("")));
      pilot.update(_this.node.section.parent);
      return node.bind();
    });
  };

  /*
  */


  EachDecor.prototype._remove = function(item) {
    var child, i, _i, _len, _ref, _results;

    _ref = this.children;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      child = _ref[i];
      if (child.item === item) {
        this.children.splice(i, 1);
        child.section.dispose();
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return EachDecor;

})(require("./base"));

module.exports = EachDecor;
