// Generated by CoffeeScript 1.6.2
var EachDecor, EachNode, async,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

async = require("async");

EachNode = (function(_super) {
  __extends(EachNode, _super);

  /*
  */


  function EachNode(item, block, itemName) {
    this.item = item;
    this.block = block;
    this.itemName = itemName != null ? itemName : "item";
    EachNode.__super__.constructor.call(this);
  }

  /*
  */


  EachNode.prototype.load = function(context, callback) {
    var data;

    data = {};
    data[this.itemName] = this.item;
    return EachNode.__super__.load.call(this, context.child(data), callback);
  };

  /*
  */


  EachNode.prototype._loadChildren = function(info, callback) {
    return this.block.content.load(info, callback);
  };

  return EachNode;

})(require("../../nodes/bindable"));

EachDecor = (function(_super) {
  __extends(EachDecor, _super);

  /*
  */


  EachDecor.scriptName = "each";

  /*
  */


  function EachDecor() {
    EachDecor.__super__.constructor.apply(this, arguments);
  }

  /*
  */


  EachDecor.prototype.load = function(context, callback) {
    var item, itemName, _i, _len, _ref;

    this.children = [];
    itemName = this.node.clip.get("as") || "item";
    _ref = this.script.value || [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      this.children.push(new EachNode(item, this.node, itemName));
    }
    return async.eachSeries(this.children, (function(child, next) {
      return child.load(context, next);
    }), callback);
  };

  return EachDecor;

})(require("./base"));

module.exports = EachDecor;
