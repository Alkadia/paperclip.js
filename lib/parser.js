// Generated by CoffeeScript 1.6.2
(function() {
  var Parser, TokenCodes, Tokenizer;

  Tokenizer = require("./tokenizer");

  TokenCodes = Tokenizer.codes;

  /*
   action:
  */


  Parser = (function() {
    /*
    */
    function Parser() {
      this._t = new Tokenizer();
    }

    /*
    */


    Parser.prototype.parse = function(source) {
      this._t.source(source);
      return this._parse();
    };

    /*
    */


    Parser.prototype._parse = function() {
      switch (this._nextCode()) {
        case TokenCodes.WORD:
          return this._parseActions();
        default:
          return this._error();
      }
    };

    /*
    */


    Parser.prototype._parseActions = function() {
      var actions;

      actions = [];
      while (this._t.current) {
        actions.push(this._parseAction());
        if (this._currentCode() === TokenCodes.SEMI_COLON) {
          this._nextCode();
        }
      }
      console.log(actions);
      return actions;
    };

    /*
    */


    Parser.prototype._parseAction = function() {
      var action;

      action = {
        name: this._currentString()
      };
      this._expectNextCode(TokenCodes.COLON);
      action.options = this._parseActionOptions();
      return action;
    };

    /*
    */


    Parser.prototype._parseActionOptions = function() {
      switch (this._nextCode()) {
        case TokenCodes.LB:
          return this._parseMultiOptions();
        case TokenCodes.WORD:
          return this._parseReference();
        case TokenCodes.STRING:
          return this._parseString();
        default:
          return this._error();
      }
    };

    /*
    */


    Parser.prototype._parseMultiOptions = function() {
      var c, ops, options;

      c = this._currentCode();
      options = [];
      while (c && (c = this._currentCode()) !== TokenCodes.RB) {
        this._nextCode();
        ops = {
          name: this._currentString()
        };
        this._expectNextCode(TokenCodes.COLON);
        ops.buffer = this._parseActionOptions();
        options.push(ops);
      }
      this._nextCode();
      return options;
    };

    /*
    */


    Parser.prototype._parseReference = function() {
      var buffer, c, refs;

      refs = [];
      buffer = [];
      while (c = this._currentCode()) {
        if (c === TokenCodes.WORD) {
          buffer.push(this._parseRef());
          c = this._currentCode();
        }
        if (c === TokenCodes.LP) {
          buffer.push(this._parseParams());
          c = this._currentCode();
        }
        if (c === TokenCodes.LB) {
          buffer.push(this._parseBrackes());
          c = this._currentCode();
        }
        if (~[TokenCodes.RP, TokenCodes.RB].indexOf(c)) {
          return buffer;
        }
        if (!c || ~[TokenCodes.SEMI_COLON, TokenCodes.COMA].indexOf(this._currentCode())) {
          break;
        }
        buffer.push(this._currentString());
        this._nextCode();
      }
      this._nextCode();
      return buffer;
    };

    /*
    */


    Parser.prototype._parseRef = function() {
      var c, name, refs;

      c = this._currentCode();
      refs = [];
      while (c === TokenCodes.WORD) {
        name = this._t.current[1];
        if ((c = this._nextCode()) === TokenCodes.LP) {
          refs.push(name + this._parseParams());
        } else {
          refs.push(name);
        }
        if (this._currentCode() === TokenCodes.DOT) {
          c = this._nextCode();
        }
      }
      return refs;
    };

    /*
    */


    Parser.prototype._parseParams = function() {
      return this._bufferUntil(TokenCodes.LP, TokenCodes.RP);
    };

    Parser.prototype._parseBrackes = function() {
      return this._bufferUntil(TokenCodes.LB, TokenCodes.RB);
    };

    /*
    */


    Parser.prototype._bufferUntil = function(left, right) {
      var buffer, c;

      c = this._currentCode();
      buffer = [];
      while (c && c !== right) {
        buffer.push(this._t.current[1]);
        if ((c = this._nextCode()) === left) {
          buffer.push(this._bufferUntil(left, right));
        }
      }
      buffer.push(this._t.current[1]);
      this._nextCode();
      return buffer.join("");
    };

    /*
    */


    Parser.prototype._expectNextCode = function(code) {
      if (this._t.next()[0] !== code) {
        return this._error();
      }
    };

    /*
    */


    Parser.prototype._expectCurrentCode = function(code) {
      if (this._t.current[0] !== code) {
        return this._error();
      }
    };

    /*
    */


    Parser.prototype._nextCode = function() {
      var _ref;

      return (_ref = this._t.next()) != null ? _ref[0] : void 0;
    };

    /*
    */


    Parser.prototype._currentCode = function() {
      var _ref;

      return (_ref = this._t.current) != null ? _ref[0] : void 0;
    };

    /*
    */


    Parser.prototype._currentString = function() {
      var _ref;

      return (_ref = this._t.current) != null ? _ref[1] : void 0;
    };

    Parser.prototype._error = function() {
      throw new Error("unexpected token " + (TokenCodes.key(this._t.current[0])) + " '" + this._t.current[1] + "' in '" + (this._t.source()) + "'");
    };

    return Parser;

  })();

  module.exports = Parser;

}).call(this);
