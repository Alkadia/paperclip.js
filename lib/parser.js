// Generated by CoffeeScript 1.6.2
(function() {
  var ActionExpression, FnExpression, ModifierExpression, OptionsExpression, Parser, RefExpression, RefPathExpression, ScriptExpression, TokenCodes, Tokenizer;

  Tokenizer = require("./tokenizer");

  TokenCodes = Tokenizer.codes;

  ModifierExpression = require("./expressions/modifier");

  ScriptExpression = require("./expressions/script");

  ActionExpression = require("./expressions/action");

  OptionsExpression = require("./expressions/options");

  RefExpression = require("./expressions/ref");

  RefPathExpression = require("./expressions/refPath");

  FnExpression = require("./expressions/fn");

  /*
   action:
  */


  Parser = (function() {
    /*
    */
    function Parser() {
      this._t = new Tokenizer();
    }

    /*
    */


    Parser.prototype.parse = function(source) {
      this._t.source(source);
      return this._parse();
    };

    /*
    */


    Parser.prototype._parse = function() {
      switch (this._nextCode()) {
        case TokenCodes.VAR:
          return this._parseActions();
        default:
          return this._error();
      }
    };

    /*
    */


    Parser.prototype._parseActions = function() {
      var actions;

      actions = [];
      while (this._t.current) {
        actions.push(this._parseAction());
        if (this._currentCode() === TokenCodes.SEMI_COLON) {
          this._nextCode();
        }
      }
      console.log(JSON.stringify(actions, null, 2));
      return actions;
    };

    /*
    */


    Parser.prototype._parseAction = function() {
      var name;

      name = this._currentString();
      this._expectNextCode(TokenCodes.COLON);
      this._nextCode();
      return new ActionExpression(name, this._parseActionOptions());
    };

    /*
    */


    Parser.prototype._parseActionOptions = function() {
      switch (this._currentCode()) {
        case TokenCodes.LB:
          return this._parseMultiOptions();
        default:
          return this._parseReference();
      }
    };

    /*
    */


    Parser.prototype._parseMultiOptions = function() {
      var c, ops, options;

      c = this._currentCode();
      options = [];
      while (c && (c = this._currentCode()) !== TokenCodes.RB) {
        this._nextCode();
        ops = {
          name: this._currentString()
        };
        this._expectNextCode(TokenCodes.COLON);
        this._nextCode();
        ops.expression = this._parseActionOptions();
        options.push(ops);
      }
      this._nextCode();
      return new OptionsExpression(options);
    };

    /*
    */


    Parser.prototype._parseReference = function() {
      var c, cpos, expressions, modifiers, pos, script, _ref;

      expressions = [];
      modifiers = [];
      cpos = this._t.current[2] - this._t.current[1].length + 1;
      while (c = this._currentCode()) {
        if (c === TokenCodes.VAR) {
          expressions.push(this._parseRef());
          c = this._currentCode();
        }
        if (c === TokenCodes.LP) {
          this._parseParams();
          c = this._currentCode();
        }
        if (c === TokenCodes.LB) {
          this._parseBrackes();
          c = this._currentCode();
        }
        if (~[TokenCodes.RP, TokenCodes.RB].indexOf(c)) {
          break;
        }
        if (!c || ~[TokenCodes.SEMI_COLON, TokenCodes.COMA, TokenCodes.PIPE].indexOf(c)) {
          break;
        }
        this._nextCode();
      }
      pos = this._t._s.pos();
      this._t._s.pos(cpos);
      script = this._t._s.to((((_ref = this._t.current) != null ? _ref[2] : void 0) || pos) - cpos);
      this._t._s.pos(pos);
      if (this._currentCode() === TokenCodes.SEMI_COLON) {
        this._nextCode();
      }
      modifiers = [];
      if (this._currentCode() === TokenCodes.PIPE) {
        modifiers.push(this._parsePipes());
      }
      return new ScriptExpression(script, expressions, modifiers);
    };

    /*
    */


    Parser.prototype._parsePipes = function() {
      var buffer, c;

      buffer = [];
      while ((c = this._currentCode()) === TokenCodes.PIPE) {
        this._nextCode();
        buffer.push(this._parsePipe());
      }
      return buffer;
    };

    /*
     filter item.name > 5, test;
    */


    Parser.prototype._parsePipe = function() {
      var name, params;

      name = this._currentString();
      params = [];
      this._nextCode();
      return new ModifierExpression(name, this._parseParams());
    };

    /*
    */


    Parser.prototype._parseParams = function() {
      var c, params;

      this._expectCurrentCode(TokenCodes.LP);
      params = [];
      while (c = this._nextCode()) {
        params.push(this._parseActionOptions());
        c = this._currentCode();
        if (c !== TokenCodes.COMA) {
          break;
        }
        if (c === TokenCodes.RB) {
          break;
        }
      }
      this._nextCode();
      return params;
    };

    /*
    */


    Parser.prototype._parseRef = function() {
      var c, name, refs;

      c = this._currentCode();
      refs = [];
      while (c === TokenCodes.VAR) {
        name = this._currentString();
        if ((c = this._nextCode()) === TokenCodes.LP) {
          refs.push(new FnExpression(name, this._parseParams()));
          c = this._currentCode();
        } else {
          refs.push(new RefExpression(name));
        }
        if (c === TokenCodes.DOT) {
          c = this._nextCode();
        }
      }
      return new RefPathExpression(refs);
    };

    /*
    */


    Parser.prototype._parseBrackes = function() {
      return this._bufferUntil(TokenCodes.LB, TokenCodes.RB);
    };

    /*
    */


    Parser.prototype._bufferUntil = function(left, right) {
      var buffer, c;

      c = this._currentCode();
      buffer = [];
      while (c && c !== right) {
        buffer.push(this._currentString());
        if ((c = this._nextCode()) === left) {
          buffer.push(this._bufferUntil(left, right));
        }
      }
      buffer.push(this._currentString());
      this._nextCode();
      return buffer.join("");
    };

    /*
    */


    Parser.prototype._expectNextCode = function(code) {
      if (this._t.next()[0] !== code) {
        return this._error();
      }
    };

    /*
    */


    Parser.prototype._expectCurrentCode = function(code) {
      if (this._t.current[0] !== code) {
        return this._error();
      }
    };

    /*
    */


    Parser.prototype._nextCode = function() {
      var _ref;

      return (_ref = this._t.next()) != null ? _ref[0] : void 0;
    };

    /*
    */


    Parser.prototype._currentCode = function() {
      var _ref;

      return (_ref = this._t.current) != null ? _ref[0] : void 0;
    };

    /*
    */


    Parser.prototype._currentString = function() {
      var _ref;

      return (_ref = this._t.current) != null ? _ref[1] : void 0;
    };

    Parser.prototype._error = function() {
      throw new Error("unexpected token " + (TokenCodes.key(this._t.current[0])) + " '" + this._t.current[1] + "' in '" + (this._t.source()) + "'");
    };

    return Parser;

  })();

  module.exports = Parser;

}).call(this);
