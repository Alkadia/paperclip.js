// Generated by CoffeeScript 1.6.2
(function() {
  var Codes, Tokenizer, key, strscan;

  strscan = require("strscanner");

  Codes = (function() {
    function Codes() {}

    Codes.OTHER = -1;

    Codes.WORD = 1;

    Codes.STRING = Codes.WORD << 1;

    Codes.VAR = Codes.STRING << 1;

    Codes.WS = Codes.VAR << 1;

    Codes.NUMBER = Codes.WS << 1;

    Codes.DOLLAR = 36;

    Codes.LP = 40;

    Codes.RP = 41;

    Codes.COMA = 44;

    Codes.DOT = 46;

    Codes.COLON = 58;

    Codes.SEMI_COLON = 59;

    Codes.AT = 64;

    Codes.LB = 123;

    Codes.PIPE = 124;

    Codes.RB = 125;

    Codes.byCodes = {};

    Codes.key = function(code) {
      var key;

      for (key in Codes) {
        if (Codes[key] === code) {
          return key;
        }
      }
    };

    return Codes;

  })();

  for (key in Codes) {
    Codes.byCodes[Codes[key]] = Codes[key];
  }

  /*
  
  1. check if word. If word, then eval until /}|,/
  value = parse("name")
  */


  Tokenizer = (function() {
    /*
    */
    Tokenizer.prototype.codes = Codes;

    Tokenizer.codes = Codes;

    /*
    */


    function Tokenizer() {
      this._s = strscan("", {
        skipWhitespace: true
      });
      this._pool = [];
    }

    /*
    */


    Tokenizer.prototype.source = function(value) {
      if (!arguments.length) {
        return this._source;
      }
      this._s.source(this._source = value);
      return this;
    };

    /*
    */


    Tokenizer.prototype.putBack = function() {
      return this._pool.push(this.current);
    };

    /*
    */


    Tokenizer.prototype.next = function() {
      var buffer, c, ccode, cscode;

      if (this._pool.length) {
        return this._pool.pop();
      }
      if (this._s.eof()) {
        return (this.current = null);
      }
      if (this._s.isAZ() || (ccode = this._s.ccode()) === 36 || ccode === 95) {
        return this._t(Codes.VAR, this._s.next(/[_$a-zA-Z]+/));
      } else if (ccode === 39 || ccode === 34) {
        buffer = [];
        while ((c = this._s.nextChar()) && !this._s.eof()) {
          cscode = this._s.ccode();
          if (cscode === 92) {
            buffer.push(this._s.nextChar());
            continue;
          }
          if (cscode === ccode) {
            break;
          }
          buffer.push(c);
        }
        return this._t(Codes.STRING, buffer.join(""));
      } else if (this._s.is09()) {
        return this._t(Codes.NUMBER, this._s.nextNumber());
      } else if (this._s.isWs()) {
        return this._t(Codes.WS, this._s.next(/[\s\r\n\t]+/));
      }
      return this._t(Codes.byCodes[ccode] || Codes.OTHER, this._s.cchar());
    };

    /*
    */


    Tokenizer.prototype._t = function(code, value) {
      this._s.nextChar();
      return this.current = [code, value];
    };

    return Tokenizer;

  })();

  module.exports = Tokenizer;

}).call(this);
