// Generated by CoffeeScript 1.6.2
var Parser;

Parser = (function() {
  /*
  */
  function Parser(_t) {
    this._t = _t;
  }

  /*
  */


  Parser.prototype.parse = function(source) {
    this._source = source;
    this._t.source(source);
    return this._parse();
  };

  /*
  */


  Parser.prototype._parse = function() {};

  /*
  */


  Parser.prototype._expectNextCode = function(code) {
    if (this._t.next()[0] !== code) {
      return this._error();
    }
  };

  /*
  */


  Parser.prototype._expectCurrentCode = function(code) {
    if (this._t.current[0] !== code) {
      return this._error();
    }
  };

  /*
  */


  Parser.prototype._nextCode = function() {
    var _ref;

    return (_ref = this._t.next()) != null ? _ref[0] : void 0;
  };

  /*
  */


  Parser.prototype._nextString = function() {
    var _ref;

    return (_ref = this._t.next()) != null ? _ref[1] : void 0;
  };

  /*
  */


  Parser.prototype._currentCode = function() {
    var _ref;

    return (_ref = this._t.current) != null ? _ref[0] : void 0;
  };

  /*
  */


  Parser.prototype._currentString = function() {
    var _ref;

    return (_ref = this._t.current) != null ? _ref[1] : void 0;
  };

  Parser.prototype._error = function() {
    var buffer, char, n, pos, _i, _ref;

    pos = this._t.current[2];
    buffer = "\n\nUnexpected Token:\n";
    buffer += this._source + "\n";
    for (n = _i = 0, _ref = this._source.length; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
      if (n === pos) {
        char = "^";
      } else {
        char = "-";
      }
      buffer += char;
    }
    buffer += "\n\n";
    throw new Error(buffer);
  };

  return Parser;

})();

module.exports = Parser;
