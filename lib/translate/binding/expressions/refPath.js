// Generated by CoffeeScript 1.6.2
(function() {
  var CollectionExpression, RefPathExpression,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CollectionExpression = require("../../base/collectionExpression");

  RefPathExpression = (function(_super) {
    __extends(RefPathExpression, _super);

    /*
    */


    RefPathExpression.prototype._type = "refPath";

    /*
    */


    function RefPathExpression(items, castAs, assign) {
      this.castAs = castAs;
      this.assign = assign != null ? assign : "";
      RefPathExpression.__super__.constructor.call(this, items);
    }

    /*
    */


    RefPathExpression.prototype.toPathString = function() {
      return this.items.join(".");
    };

    /*
    */


    RefPathExpression.prototype.toString = function() {
      var buffer, callChain, currentChain, part, self, _i, _len, _ref;

      buffer = ["this."];
      currentChain = [];
      self = false;
      callChain = [];
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        if (part._type === "fn") {
          if (currentChain.length) {
            callChain.push('"' + currentChain.join(".") + '"');
          }
          callChain.push("['" + part.name + "'" + (part.params.items.length ? "," + part.params.toString() : "") + "]");
          currentChain = [];
          self = false;
        } else {
          currentChain.push(part.name);
          self = self || part.self;
        }
      }
      if (currentChain.length) {
        callChain.push('"' + currentChain.join(".") + '"');
      }
      if (this.assign !== "") {
        buffer.push("_s");
        callChain.push(this.assign);
      } else {
        buffer.push("_g");
      }
      buffer.push("(" + callChain.join(",") + ")");
      return buffer.join("");
    };

    return RefPathExpression;

  })(CollectionExpression);

  module.exports = RefPathExpression;

}).call(this);
