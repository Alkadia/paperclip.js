// Generated by CoffeeScript 1.6.2
(function() {
  var AttributesExpression,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AttributesExpression = (function(_super) {
    __extends(AttributesExpression, _super);

    /*
    */


    function AttributesExpression(items) {
      AttributesExpression.__super__.constructor.call(this, items);
    }

    /*
    */


    AttributesExpression.prototype.hasBinding = function() {
      var attr, _i, _len, _ref;

      _ref = this._children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        if (attr.hasBinding()) {
          return true;
        }
      }
      return false;
    };

    /*
    */


    AttributesExpression.prototype.toString = function() {
      var attr, attrValue, isScript, name, params, _i, _len, _ref;

      params = [];
      _ref = this._children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        isScript = !!attr.value.items.filter(function(item) {
          return item._type === "script";
        }).length;
        name = attr.name;
        if (isScript || name === "data-bind") {
          attrValue = "[" + attr.value.toString() + "]";
        } else {
          attrValue = attr.value ? attr.value.items[0].toString() : 'true';
        }
        params.push("'" + name + "':" + attrValue);
      }
      return "{" + (params.join(',')) + "}";
    };

    return AttributesExpression;

  })(require("./collection"));

  module.exports = AttributesExpression;

}).call(this);
