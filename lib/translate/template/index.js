// Generated by CoffeeScript 1.6.2
var Clip, Parser, Template, TemplateRenderer, TemplateScript, bindable, events, parser,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Parser = require("./parser");

Clip = require("../../clip");

events = require("events");

bindable = require("bindable");

/*
  watches for any changes in the template data
*/


TemplateScript = (function() {
  /*
  */
  function TemplateScript(renderer, fn) {
    this.renderer = renderer;
    this.fn = fn;
    this.update = __bind(this.update, this);
    this.clip = new Clip({
      script: this.fn,
      data: this.renderer._data
    });
    this.clip.bind("value").watch(true).to(this.update);
    this.value = this.clip.get("value");
  }

  /*
  */


  TemplateScript.prototype.dispose = function() {
    return this.clip.dispose();
  };

  /*
  */


  TemplateScript.prototype.update = function(value) {
    this.value = value;
    return this.renderer.update();
  };

  /*
  */


  TemplateScript.prototype.toString = function() {
    return String(this.value);
  };

  return TemplateScript;

})();

/*
 Keeps track of each template block. E.g: hello {{craig}}, how are you?
*/


TemplateRenderer = (function(_super) {
  __extends(TemplateRenderer, _super);

  /*
  */


  function TemplateRenderer(_data, fn) {
    this._data = _data;
    this.fn = fn;
    TemplateRenderer.__super__.constructor.call(this);
    this.buffer = [];
    this.bindings = [];
    this.fn.call(this);
    this.update();
  }

  /*
  */


  TemplateRenderer.prototype.dispose = function() {
    var binding, _i, _len, _ref;

    _ref = this.bindings;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      binding = _ref[_i];
      binding.dispose();
    }
    return this.bindings = [];
  };

  /*
   pushes a regular string to the buffer
  */


  TemplateRenderer.prototype.push = function(source) {
    this.buffer.push(source);
    return this;
  };

  /*
   pushes a bindable block (dynamically changes), to the string buffer
  */


  TemplateRenderer.prototype.pushScript = function(script) {
    var binding;

    this.buffer.push(binding = new TemplateScript(this, script));
    this.bindings.push(binding);
    return this;
  };

  /*
   updates the current text by stringifying the buffer
  */


  TemplateRenderer.prototype.update = function() {
    return this.set("text", this.text = this.render());
  };

  /*
   stringifies the buffer
  */


  TemplateRenderer.prototype.render = function() {
    return this.buffer.join("");
  };

  /*
  */


  TemplateRenderer.prototype.toString = function() {
    return this.text;
  };

  return TemplateRenderer;

})(bindable.Object);

parser = new Parser();

Template = (function() {
  /*
  */
  function Template(source) {
    this.fn = new Function("return " + parser.parse(source));
  }

  /*
  */


  Template.prototype.render = function(data) {
    return new TemplateRenderer(data, this.fn);
  };

  return Template;

})();

module.exports = Template;
