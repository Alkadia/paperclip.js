// Generated by CoffeeScript 1.6.2
var BaseTokenizer, Codes, Tokenizer,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BaseTokenizer = require("../base/tokenizer");

/*
 <div id="test">

 </div>
*/


Codes = (function() {
  function Codes() {}

  Codes.OTHER = -1;

  Codes.WORD = 0;

  Codes.STAG = Codes.WORD + 1;

  Codes.ETAG = Codes.STAG + 1;

  Codes.EQ = Codes.ETAG + 1;

  Codes.STRING = Codes.EQ + 1;

  Codes.LM = Codes.STRING + 1;

  Codes.RM = Codes.LM + 1;

  Codes.BLOCK = Codes.RM + 1;

  Codes.CHAR = Codes.BLOCK + 1;

  Codes.COMMENT = Codes.CHAR + 1;

  return Codes;

})();

Tokenizer = (function(_super) {
  __extends(Tokenizer, _super);

  /*
  */


  Tokenizer.Codes = Codes;

  /*
  */


  function Tokenizer() {
    Tokenizer.__super__.constructor.call(this);
    this._s.skipWhitespace(false);
  }

  /*
  */


  Tokenizer.prototype._next = function() {
    var buffer, cchar, t;

    if (this._s.isAZ()) {
      return this._t(Codes.WORD, this._s.next(/[a-zA-Z0-9]+/));
    }
    if ((cchar = this._s.cchar()) === "<") {
      if (this._s.peek(4) === "<!--") {
        this._s.skip(4);
        buffer = [];
        while ((cchar = this._s.cchar()) && cchar) {
          if (cchar === "-") {
            if (this._s.peek(3) === "-->") {
              this._s.skip(3);
              break;
            }
          }
          console.log(cchar);
          buffer.push(cchar);
          this._s.nextChar();
        }
        return this._t(Codes.COMMENT, buffer.join(""));
      } else if (this._s.peek(2) === "</") {
        this._s.skip(1);
        return this._t(Codes.ETAG, "</");
      }
    } else if (cchar === "/") {
      if (this._s.peek(2) === "/>") {
        this._s.skip(1);
        return this._t(Codes.ETAG, "/>");
      }
    } else if (cchar === ">") {
      return this._t(Codes.ETAG, ">");
    } else if ((t = this._tstring(Codes.STRING))) {
      return t;
    } else if (cchar === "{") {
      if (this._s.peek(2) === "{{") {
        this._s.nextChar();
        return this._t(Codes.LM, "{{");
      }
    } else if (cchar === "}") {
      if (this._s.peek(2) === "}}") {
        this._s.nextChar();
        return this._t(Codes.RM, "}}");
      }
    }
    return this._t(Codes.CHAR, this._s.cchar());
  };

  return Tokenizer;

})(BaseTokenizer);

module.exports = Tokenizer;
