0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.24
3 info using node@v0.10.30
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/craig/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/craig/.npm/paperclip/0.3.160/package.tgz', '.' ]
11 verbose tarball /Users/craig/.npm/paperclip/0.3.160/package.tgz
12 verbose folder .
13 info prepublish paperclip@0.3.160
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/craig/.npm/1f1177db-tar.lock
16 silly lockFile 33503755-pm-paperclip-0-3-160-package-tgz tar:///Users/craig/.npm/paperclip/0.3.160/package.tgz
17 verbose lock tar:///Users/craig/.npm/paperclip/0.3.160/package.tgz /Users/craig/.npm/33503755-pm-paperclip-0-3-160-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 33503755-pm-paperclip-0-3-160-package-tgz tar:///Users/craig/.npm/paperclip/0.3.160/package.tgz
21 silly lockFile 33503755-pm-paperclip-0-3-160-package-tgz tar:///Users/craig/.npm/paperclip/0.3.160/package.tgz
22 silly lockFile dded6926-ig-npm-paperclip-0-3-160-package /Users/craig/.npm/paperclip/0.3.160/package
23 verbose lock /Users/craig/.npm/paperclip/0.3.160/package /Users/craig/.npm/dded6926-ig-npm-paperclip-0-3-160-package.lock
24 silly lockFile dded6926-ig-npm-paperclip-0-3-160-package /Users/craig/.npm/paperclip/0.3.160/package
25 silly lockFile dded6926-ig-npm-paperclip-0-3-160-package /Users/craig/.npm/paperclip/0.3.160/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'paperclip',
28 silly publish   version: '0.3.160',
28 silly publish   description: 'controller logic:',
28 silly publish   main: './lib/index.js',
28 silly publish   browserify: './lib/browser.js',
28 silly publish   scripts: { test: 'mocha ./test/*/*-test.js --ignore-leaks --bail' },
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'git://github.com/classdojo/paperclip.js.git' },
28 silly publish   author: '',
28 silly publish   license: 'MIT',
28 silly publish   gitHead: '1336ca5b7f1f0c344a291ace63ddf211d5a94acd',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   devDependencies:
28 silly publish    { benchmark: '~1.0.0',
28 silly publish      coveralls: '~2.5.0',
28 silly publish      'expect.js': '0.2.x',
28 silly publish      express: '~3.3.4',
28 silly publish      istanbul: '~0.1.46',
28 silly publish      jquery: '~1.8.3',
28 silly publish      jsdom: '0.10.5',
28 silly publish      jshint: '^2.5.4',
28 silly publish      mocha: '~1.15.1',
28 silly publish      structr: '~0.2.3' },
28 silly publish   bin: { paperclip: './bin/paperclip' },
28 silly publish   dependencies:
28 silly publish    { async: '0.7.x',
28 silly publish      asyngleton: '0.1.x',
28 silly publish      bindable: '0.5.x',
28 silly publish      browserify: '~3.30.1',
28 silly publish      dref: '0.0.x',
28 silly publish      gaze: '^0.6.4',
28 silly publish      he: '~0.4.1',
28 silly publish      loaf: '0.2.x',
28 silly publish      'mojo-animator': '0.0.x',
28 silly publish      'mojo-application': '0.0.x',
28 silly publish      nofactor: '0.0.x',
28 silly publish      noselector: '0.0.x',
28 silly publish      optimist: '0.4.x',
28 silly publish      platform: '1.0.x',
28 silly publish      protoclass: '0.0.x',
28 silly publish      runlater: '0.0.x',
28 silly publish      sift: '0.0.12',
28 silly publish      strscanner: '0.0.x',
28 silly publish      'type-component': '0.0.x',
28 silly publish      'uglify-js': '1.3.x',
28 silly publish      underscore: '1.4.x',
28 silly publish      walkr: '0.0.x',
28 silly publish      watch_r: '0.0.x' },
28 silly publish   readme: '# Paperclip.js [![Alt ci](https://travis-ci.org/mojo-js/paperclip.js.png)](https://travis-ci.org/mojo-js/paperclip.js)\n\nPaperclip is a fast, data-bindable templating system inspired by [Mustache](https://github.com/janl/mustache.js/), [Angular](http://angularjs.org/), [Derby](http://derbyjs.com/), and [Knockout](http://knockoutjs.com/). It\'s supported on all major platforms: `IE8+`, `Firefox`, `Chrome`, `Safari`, `Opera`, as well as `Node.js`.\n\nPaperclip works by listening to [bindable](https://github.com/classdojo/bindable.js) objects, and updating the template if anything changes. This means that paperclip uses very few operations in order to manipulate the DOM. \n\nPaperclip first translates HTML directly to JavaScript. At the same time, the parser also marks any data-bindings that it runs into. Paperclip then creates an element from the template, and then runs the browser\'s native `cloneNode()` method each time the template is needed. [This turns out to be very fast](http://jsfiddle.net/JTxdM/65/). \n\n\nPaperclip translates HTML directly to JavaScript. For example, the following `hello.pc` file:\n\n```html\nhello {{name}}!\n```\n\nis translated to:\n\n```javascript\nmodule.exports = function(fragment, block, element, text, textBlock, parser, modifiers) {\n    return fragment([ text("hello "), block({\n        value: {\n            fn: function() {\n                return this.get([ "name" ]);\n            },\n            refs: [ [ "name" ] ]\n        }\n    }, void 0), text("! ") ]);\n};\n```\n\n\nThis means a few things:\n\n- Super fast. [10k list items in ~ 500 MS](http://jsfiddle.net/JTxdM/65/).\n- Works very well on older browsers such as IE8.\n- You can customize paperclip to generate your own sort of markup language.\n- No metamorph tags, or other things that pollute the DOM, and cause strange bugs.\n\n\n### Features\n\n- template update automatically if the data changes\n- write javascript expressions directly inline. Just like Angular.js.\n- [block helpers](#block-helpers)\n- [data-bind attributes](#data-bind-attributes) (similar to knockout.js)\n- [declarative data-binding](#blocks), similar to angular.js\n- node.js support\n- [block modifiers](#modifiers), similar to angular filters\n- [pollyfills](#pollyfills), similar to angular directives\n- [full control over data-bindings](#binding-operators)\n\n### Examples\n\n- [hello input](http://jsfiddle.net/JTxdM/67/)\n- [hello world](http://jsfiddle.net/JTxdM/68/)\n- [modifiers](http://jsfiddle.net/JTxdM/69/)\n- [simple calculator](http://jsfiddle.net/JTxdM/98/)\n- [data-binding attributes](http://jsfiddle.net/JTxdM/71/)\n- [inline javascript](http://jsfiddle.net/JTxdM/72/)\n- [animal age calculator](http://jsfiddle.net/JTxdM/73/)\n- [titlecase / lowercase modifiers](http://jsfiddle.net/JTxdM/74/)\n- [if / elseif / else block](http://jsfiddle.net/JTxdM/75/)\n- [html block helper](http://jsfiddle.net/JTxdM/76/)\n- [onEnter event](http://jsfiddle.net/JTxdM/77/)\n- [data-binding css](http://jsfiddle.net/JTxdM/81/)\n- [data-binding styles](http://jsfiddle.net/JTxdM/78/)\n- [binding helpers](http://jsfiddle.net/JTxdM/93/)\n- [manually updating templates](http://jsfiddle.net/JTxdM/79/)\n- [list benchmark](http://jsfiddle.net/JTxdM/65/) - 10k items\n- [dots benchmark](http://jsfiddle.net/JTxdM/62/)\n\n### Third-party components:\n\n- [paperclip-component](https://github.com/classdojo/paperclip-component) - used with [Mojo.js](https://github.com/classdojo/mojo.js). Allows for views to be instantiated within paperclip templates. This is similar to Ember.js\'s component, and Angular.js\'s directive implementation.\n- [paperclip-placeholder-pollyfill](https://github.com/classdojo/paperclip-placeholder-pollyfill) - placeholder pollyfull for IE users.\n\n### Installation\n\n```bash\nnpm install paperclip -g\n```\n\n### Compiling a script\n\n```bash\npaperclip -i template.pc -o template.pc.js\n```\n\n## Syntax\n\nPaperclip takes on a mustache / handlebars approach with variables, blocks, and pollyfills. Paperclip also allows basic inline javascript, similar to angular.js.\n\n### Blocks\n\nPaperclip support variable blocks, just like Angular.js. [For example](http://jsfiddle.net/JTxdM/80/):\n\n```html\nhello {{ name.first }} {{ name.last }}!\n```\n\nYou can also specify blocks within attributes. [For example](http://jsfiddle.net/JTxdM/71/):\n\n```html\nmy favorite color is <span style="color: {{color}}">{{color}}</span>\n```\n\n\nIf you want to add some sugar, go ahead and [drop-in some javascript](http://jsfiddle.net/JTxdM/72/):\n\n```html\nhello {{ message || "world!" }}!\n```\n\n### Modifiers\n\nModifiers format data in a variable block. A good example of this might be presenting data to the user depending on their locale. For example:\n\ntranslation modifier:\n\n```javascript\npaperclip.modifier("t", function(value) {\n  return i18n.t(value);\n})\n```\n\ntemplate usage:\n\n```html\n{{ "hello.world" | t() }}\n```\n\nModifiers can be chained together. For example, you can send a strong message to your users by writing something like:\n\n```html\n{{ "hello.world" | t() | uppercase() }}!!!\n```\n\nWhich might produce:\n\n```bash\nHELLO WORLD!!!\n```\n\nModifiers also accept parameters. [For example](http://jsfiddle.net/JTxdM/73/):\n\n```javascript\npaperclip.modifier("divide", function(value, num) {\n  return Math.round((value || 0) / num);\n});\n```\n\ntemplate usage:\n\n```html\nA human that is {{age}} years old is like a {{ age | divide(5.6) }} year old dog!\n```\n\n### Binding Operators\n\nPaperclip comes with various binding operators that give you full control over how references are handled. You can easily\nspecify whether to bind one way, two ways, or not at all. Here\'s the basic syntax:\n\n```html\n<input data-bind="{{ model: <~>fullName }}" /> <!-- two-way data-binding against input -->\n<input data-bind="{{ model: ~>fullName }}" /> <!-- bind value once, and bind input value to fullName -->\n<input data-bind="{{ model: <~fullName }}" /> <!-- bind to input once -->\n{{ ~fullName }} <!-- unbound helper - get fullName value, but don\'t watch for changes -->\n```\n\nNote that that `=fullName` tells paperclip not to watch the reference, so any changes to `fullName` don\'t get reflected in the view. [Here\'s an example](http://jsfiddle.net/JTxdM/93/).\n\nBinding helpers are especially useful for [paperclip components](https://github.com/classdojo/paperclip-component). Say for instance you have a date picker:\n\n```\n{{\n    datePicker: {\n      currentDate: <~>currentDate\n    }\n}}\n```\n\nThe above example will apply a two-way data-binding to the `datePicker.currentDate` property and the `currentDate` property of the view controller.\n\n### Block Helpers\n\n#### {{ html: content }}\n\nSimilar to escaping content in mustache (`{{{content}}}`). [For example](http://jsfiddle.net/JTxdM/76/):\n\n```html\n{{ html: content }}\n```\n\n\n\n#### {{#if: condition }}\n\nConditional block helper. [For example](http://jsfiddle.net/JTxdM/75/):\n\n```\n{{#if: age > 18 }}\n  You\'re legally able to vote in the U.S.\n{{/elseif: anotherCondition }}\n  another condition\n{{/else}}\n  final condition\n{{/}}\n```\n\n\n#### Custom Block Helpers\n\nPaperclip also allows you to register your own block helpers. This is similar to custom angular.js directives.\n\nTODO example\n\n### data-bind attributes\n\ndata-bind attributes are borrowed from [knockout.js](http://knockoutjs.com/). This is useful if you want to attach behavior to any DOM element.\n\n\n#### {{ model: context }}\n\nInput data-binding. [For example](http://jsfiddle.net/JTxdM/96/):\n\n```html\n<input type="text" name="message" data-bind="{{ model: this }}"></input> {{ message }}\n```\n\nYou can also reference `message` directly. [For example](http://jsfiddle.net/JTxdM/94/)\n\n\n```html\n<input type="text" data-bind="{{ model: <=>message }}"></input> {{ message }}\n```\n\nNotice the `<=>` operator. This tells paperclip to bind both ways. See [binding operators](#binding-operators).\n\n\n#### {{ event: expression }}\n\nExecuted when an event is fired on the DOM element. Here are all the available events:\n\n- `onChange` - called when an element changes\n- `onClick` - called when an element is clicked\n- `onLoad` - called when an element loads - useful for `<img />`\n- `onSubmit` - called on submit - useful for `<form />`\n- `onMouseDown` - called on mouse down\n- `onMouseUp` - called on mouse up\n- `onMouseOver` - called on mouse over\n- `onMouseOut` - called on mouse out\n- `onKeyDown` - called on key down\n- `onKeyUp` - called on key up\n- `onEnter` - called on enter key up\n- `onDepete` - called on delete key up\n\n[Basic example](http://jsfiddle.net/JTxdM/77/):\n\n```html\n<input type="text" data-bind="{{ model: <=>name, onEnter: sayHello() }}"></input>\n```\n\n\n#### {{ show: bool }}\n\nToggles the display mode of a given element. This is similar to the `{{#if: expression }}` conditional helper.\n\n\n#### {{ css: styles }}\n\nSets the css of a given element. [For example](http://jsfiddle.net/JTxdM/81/):\n\n```html\n<strong data-bind="{{\n  css: {\n      cool    : temp > 0,\n      warm    : temp > 60,\n      hot     : temp > 90\n  }\n}}"> It\'s pretty warm! </strong>\n```\n\n#### {{ style: styles }}\n\nSets the style of a given element. [For example](http://jsfiddle.net/JTxdM/78/):\n\n```\n<span data-bind="{{\n  style: {\n    color       : color,\n    \'font-size\' : size\n  }\n}}"> Hello World </span>\n```\n\n#### {{ disable: bool }}\n\nToggles the enabled state of an element.\n\n#### Custom data-bind helpers\n\nTODO\n\n### Pollyfills\n\nPollyfills are similar to angular directives, but they should only be used to provide support for features not implemented in older browsers. A good example of this is [paperclip-placeholder-pollyfill](https://github.com/classdojo/paperclip-placeholder-pollyfill). If you need to create a custom component, [create as a block helper](#custom-block-helpers).\n\n## API\n\n#### template paperclip.template(sourceOrScriptName)\n\ntranslates the source, or script into a paperclip template. [For example](http://jsfiddle.net/JTxdM/83/).\n\n#### elements template.bind(context)\n\nCreates the DOM elements, and binds the elements to the given context.\n\n#### elements.toFragment()\n\nCasts the elements as a document fragment.\n\n#### elements.unbind()\n\nUnbinds the elements from the given context.\n\n## Node.js Usage\n\nYou can easily run paperclip in node. All you need to do is swap out the DOM factory.\n\n```javascript\nvar paperclip = require("paperclip"),\nnofactor      = require("nofactor"),\nbindable      = require("bindable");\n\nvar template = paperclip.template("<h1>Hello {{name}}</h1>", { nodeFactory: nofactor.string });\n\nvar element = template.bind(new bindable.Object({ name: "Jon" })).render();\n\nconsole.log(renderer.toString());\n```\n\nHere\'s an example: http://runnable.com/UwVueJLcL9ZTAABN/hello-paperclip-for-node-js\n',
28 silly publish   bugs: { url: 'https://github.com/classdojo/paperclip.js/issues' },
28 silly publish   homepage: 'https://github.com/classdojo/paperclip.js',
28 silly publish   _id: 'paperclip@0.3.160',
28 silly publish   _shasum: 'e1f8b9111ae7de8f967c60ea1848462cd64877e4',
28 silly publish   _from: '.' }
29 verbose request where is /paperclip
30 verbose request registry http://registry.npmjs.org/
31 verbose request id ae940ecdf89d88ce
32 verbose url raw /paperclip
33 verbose url resolving [ 'http://registry.npmjs.org/', './paperclip' ]
34 verbose url resolved http://registry.npmjs.org/paperclip
35 verbose request where is http://registry.npmjs.org/paperclip
36 info trying registry request attempt 1 at 11:12:39
37 http PUT http://registry.npmjs.org/paperclip
38 http 403 http://registry.npmjs.org/paperclip
39 verbose headers { server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '16616',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   date: 'Tue, 26 Aug 2014 18:12:40 GMT',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   connection: 'keep-alive',
39 verbose headers   'x-served-by': 'cache-lax1433-LAX',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1409076759.653385,VS0,VE603' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 0.3.160
41 error old={"name":"paperclip","version":"0.3.160","description":"controller logic:","main":"./lib/index.js","browserify":"./lib/browser.js","scripts":{"test":"mocha ./test/*/*-test.js --ignore-leaks --bail"},"repository":{"type":"git","url":"git://github.com/classdojo/paperclip.js.git"},"author":"","license":"MIT","gitHead":"1336ca5b7f1f0c344a291ace63ddf211d5a94acd","devDependencies":{"benchmark":"~1.0.0","coveralls":"~2.5.0","expect.js":"0.2.x","express":"~3.3.4","istanbul":"~0.1.46","jquery":"~1.8.3","jsdom":"0.10.5","jshint":"^2.5.4","mocha":"~1.15.1","structr":"~0.2.3"},"bin":{"paperclip":"./bin/paperclip"},"dependencies":{"async":"0.7.x","asyngleton":"0.1.x","bindable":"0.5.x","browserify":"~3.30.1","dref":"0.0.x","gaze":"^0.6.4","he":"~0.4.1","loaf":"0.2.x","mojo-animator":"0.0.x","mojo-application":"0.0.x","nofactor":"0.0.x","noselector":"0.0.x","optimist":"0.4.x","platform":"1.0.x","protoclass":"0.0.x","runlater":"0.0.x","sift":"0.0.12","strscanner":"0.0.x","type-component":"0.0.x","uglify-js":"1.3.x","underscore":"1.4.x","walkr":"0.0.x","watch_r":"0.0.x"},"bugs":{"url":"https://github.com/classdojo/paperclip.js/issues"},"homepage":"https://github.com/classdojo/paperclip.js","_id":"paperclip@0.3.160","_shasum":"e1f8b9111ae7de8f967c60ea1848462cd64877e4","_from":".","_npmVersion":"1.4.24","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"e1f8b9111ae7de8f967c60ea1848462cd64877e4","tarball":"http://registry.npmjs.org/paperclip/-/paperclip-0.3.160.tgz"}}
41 error new={"name":"paperclip","version":"0.3.160","description":"controller logic:","main":"./lib/index.js","browserify":"./lib/browser.js","scripts":{"test":"mocha ./test/*/*-test.js --ignore-leaks --bail"},"repository":{"type":"git","url":"git://github.com/classdojo/paperclip.js.git"},"author":"","license":"MIT","gitHead":"1336ca5b7f1f0c344a291ace63ddf211d5a94acd","readmeFilename":"README.md","devDependencies":{"benchmark":"~1.0.0","coveralls":"~2.5.0","expect.js":"0.2.x","express":"~3.3.4","istanbul":"~0.1.46","jquery":"~1.8.3","jsdom":"0.10.5","jshint":"^2.5.4","mocha":"~1.15.1","structr":"~0.2.3"},"bin":{"paperclip":"./bin/paperclip"},"dependencies":{"async":"0.7.x","asyngleton":"0.1.x","bindable":"0.5.x","browserify":"~3.30.1","dref":"0.0.x","gaze":"^0.6.4","he":"~0.4.1","loaf":"0.2.x","mojo-animator":"0.0.x","mojo-application":"0.0.x","nofactor":"0.0.x","noselector":"0.0.x","optimist":"0.4.x","platform":"1.0.x","protoclass":"0.0.x","runlater":"0.0.x","sift":"0.0.12","strscanner":"0.0.x","type-component":"0.0.x","uglify-js":"1.3.x","underscore":"1.4.x","walkr":"0.0.x","watch_r":"0.0.x"},"readme":"# Paperclip.js [![Alt ci](https://travis-ci.org/mojo-js/paperclip.js.png)](https://travis-ci.org/mojo-js/paperclip.js)\u000a\u000aPaperclip is a fast, data-bindable templating system inspired by [Mustache](https://github.com/janl/mustache.js/), [Angular](http://angularjs.org/), [Derby](http://derbyjs.com/), and [Knockout](http://knockoutjs.com/). It's supported on all major platforms: `IE8+`, `Firefox`, `Chrome`, `Safari`, `Opera`, as well as `Node.js`.\u000a\u000aPaperclip works by listening to [bindable](https://github.com/classdojo/bindable.js) objects, and updating the template if anything changes. This means that paperclip uses very few operations in order to manipulate the DOM. \u000a\u000aPaperclip first translates HTML directly to JavaScript. At the same time, the parser also marks any data-bindings that it runs into. Paperclip then creates an element from the template, and then runs the browser's native `cloneNode()` method each time the template is needed. [This turns out to be very fast](http://jsfiddle.net/JTxdM/65/). \u000a\u000a\u000aPaperclip translates HTML directly to JavaScript. For example, the following `hello.pc` file:\u000a\u000a```html\u000ahello {{name}}!\u000a```\u000a\u000ais translated to:\u000a\u000a```javascript\u000amodule.exports = function(fragment, block, element, text, textBlock, parser, modifiers) {\u000a    return fragment([ text(\"hello \"), block({\u000a        value: {\u000a            fn: function() {\u000a                return this.get([ \"name\" ]);\u000a            },\u000a            refs: [ [ \"name\" ] ]\u000a        }\u000a    }, void 0), text(\"! \") ]);\u000a};\u000a```\u000a\u000a\u000aThis means a few things:\u000a\u000a- Super fast. [10k list items in ~ 500 MS](http://jsfiddle.net/JTxdM/65/).\u000a- Works very well on older browsers such as IE8.\u000a- You can customize paperclip to generate your own sort of markup language.\u000a- No metamorph tags, or other things that pollute the DOM, and cause strange bugs.\u000a\u000a\u000a### Features\u000a\u000a- template update automatically if the data changes\u000a- write javascript expressions directly inline. Just like Angular.js.\u000a- [block helpers](#block-helpers)\u000a- [data-bind attributes](#data-bind-attributes) (similar to knockout.js)\u000a- [declarative data-binding](#blocks), similar to angular.js\u000a- node.js support\u000a- [block modifiers](#modifiers), similar to angular filters\u000a- [pollyfills](#pollyfills), similar to angular directives\u000a- [full control over data-bindings](#binding-operators)\u000a\u000a### Examples\u000a\u000a- [hello input](http://jsfiddle.net/JTxdM/67/)\u000a- [hello world](http://jsfiddle.net/JTxdM/68/)\u000a- [modifiers](http://jsfiddle.net/JTxdM/69/)\u000a- [simple calculator](http://jsfiddle.net/JTxdM/98/)\u000a- [data-binding attributes](http://jsfiddle.net/JTxdM/71/)\u000a- [inline javascript](http://jsfiddle.net/JTxdM/72/)\u000a- [animal age calculator](http://jsfiddle.net/JTxdM/73/)\u000a- [titlecase / lowercase modifiers](http://jsfiddle.net/JTxdM/74/)\u000a- [if / elseif / else block](http://jsfiddle.net/JTxdM/75/)\u000a- [html block helper](http://jsfiddle.net/JTxdM/76/)\u000a- [onEnter event](http://jsfiddle.net/JTxdM/77/)\u000a- [data-binding css](http://jsfiddle.net/JTxdM/81/)\u000a- [data-binding styles](http://jsfiddle.net/JTxdM/78/)\u000a- [binding helpers](http://jsfiddle.net/JTxdM/93/)\u000a- [manually updating templates](http://jsfiddle.net/JTxdM/79/)\u000a- [list benchmark](http://jsfiddle.net/JTxdM/65/) - 10k items\u000a- [dots benchmark](http://jsfiddle.net/JTxdM/62/)\u000a\u000a### Third-party components:\u000a\u000a- [paperclip-component](https://github.com/classdojo/paperclip-component) - used with [Mojo.js](https://github.com/classdojo/mojo.js). Allows for views to be instantiated within paperclip templates. This is similar to Ember.js's component, and Angular.js's directive implementation.\u000a- [paperclip-placeholder-pollyfill](https://github.com/classdojo/paperclip-placeholder-pollyfill) - placeholder pollyfull for IE users.\u000a\u000a### Installation\u000a\u000a```bash\u000anpm install paperclip -g\u000a```\u000a\u000a### Compiling a script\u000a\u000a```bash\u000apaperclip -i template.pc -o template.pc.js\u000a```\u000a\u000a## Syntax\u000a\u000aPaperclip takes on a mustache / handlebars approach with variables, blocks, and pollyfills. Paperclip also allows basic inline javascript, similar to angular.js.\u000a\u000a### Blocks\u000a\u000aPaperclip support variable blocks, just like Angular.js. [For example](http://jsfiddle.net/JTxdM/80/):\u000a\u000a```html\u000ahello {{ name.first }} {{ name.last }}!\u000a```\u000a\u000aYou can also specify blocks within attributes. [For example](http://jsfiddle.net/JTxdM/71/):\u000a\u000a```html\u000amy favorite color is <span style=\"color: {{color}}\">{{color}}</span>\u000a```\u000a\u000a\u000aIf you want to add some sugar, go ahead and [drop-in some javascript](http://jsfiddle.net/JTxdM/72/):\u000a\u000a```html\u000ahello {{ message || \"world!\" }}!\u000a```\u000a\u000a### Modifiers\u000a\u000aModifiers format data in a variable block. A good example of this might be presenting data to the user depending on their locale. For example:\u000a\u000atranslation modifier:\u000a\u000a```javascript\u000apaperclip.modifier(\"t\", function(value) {\u000a  return i18n.t(value);\u000a})\u000a```\u000a\u000atemplate usage:\u000a\u000a```html\u000a{{ \"hello.world\" | t() }}\u000a```\u000a\u000aModifiers can be chained together. For example, you can send a strong message to your users by writing something like:\u000a\u000a```html\u000a{{ \"hello.world\" | t() | uppercase() }}!!!\u000a```\u000a\u000aWhich might produce:\u000a\u000a```bash\u000aHELLO WORLD!!!\u000a```\u000a\u000aModifiers also accept parameters. [For example](http://jsfiddle.net/JTxdM/73/):\u000a\u000a```javascript\u000apaperclip.modifier(\"divide\", function(value, num) {\u000a  return Math.round((value || 0) / num);\u000a});\u000a```\u000a\u000atemplate usage:\u000a\u000a```html\u000aA human that is {{age}} years old is like a {{ age | divide(5.6) }} year old dog!\u000a```\u000a\u000a### Binding Operators\u000a\u000aPaperclip comes with various binding operators that give you full control over how references are handled. You can easily\u000aspecify whether to bind one way, two ways, or not at all. Here's the basic syntax:\u000a\u000a```html\u000a<input data-bind=\"{{ model: <~>fullName }}\" /> <!-- two-way data-binding against input -->\u000a<input data-bind=\"{{ model: ~>fullName }}\" /> <!-- bind value once, and bind input value to fullName -->\u000a<input data-bind=\"{{ model: <~fullName }}\" /> <!-- bind to input once -->\u000a{{ ~fullName }} <!-- unbound helper - get fullName value, but don't watch for changes -->\u000a```\u000a\u000aNote that that `=fullName` tells paperclip not to watch the reference, so any changes to `fullName` don't get reflected in the view. [Here's an example](http://jsfiddle.net/JTxdM/93/).\u000a\u000aBinding helpers are especially useful for [paperclip components](https://github.com/classdojo/paperclip-component). Say for instance you have a date picker:\u000a\u000a```\u000a{{\u000a    datePicker: {\u000a      currentDate: <~>currentDate\u000a    }\u000a}}\u000a```\u000a\u000aThe above example will apply a two-way data-binding to the `datePicker.currentDate` property and the `currentDate` property of the view controller.\u000a\u000a### Block Helpers\u000a\u000a#### {{ html: content }}\u000a\u000aSimilar to escaping content in mustache (`{{{content}}}`). [For example](http://jsfiddle.net/JTxdM/76/):\u000a\u000a```html\u000a{{ html: content }}\u000a```\u000a\u000a\u000a\u000a#### {{#if: condition }}\u000a\u000aConditional block helper. [For example](http://jsfiddle.net/JTxdM/75/):\u000a\u000a```\u000a{{#if: age > 18 }}\u000a  You're legally able to vote in the U.S.\u000a{{/elseif: anotherCondition }}\u000a  another condition\u000a{{/else}}\u000a  final condition\u000a{{/}}\u000a```\u000a\u000a\u000a#### Custom Block Helpers\u000a\u000aPaperclip also allows you to register your own block helpers. This is similar to custom angular.js directives.\u000a\u000aTODO example\u000a\u000a### data-bind attributes\u000a\u000adata-bind attributes are borrowed from [knockout.js](http://knockoutjs.com/). This is useful if you want to attach behavior to any DOM element.\u000a\u000a\u000a#### {{ model: context }}\u000a\u000aInput data-binding. [For example](http://jsfiddle.net/JTxdM/96/):\u000a\u000a```html\u000a<input type=\"text\" name=\"message\" data-bind=\"{{ model: this }}\"></input> {{ message }}\u000a```\u000a\u000aYou can also reference `message` directly. [For example](http://jsfiddle.net/JTxdM/94/)\u000a\u000a\u000a```html\u000a<input type=\"text\" data-bind=\"{{ model: <=>message }}\"></input> {{ message }}\u000a```\u000a\u000aNotice the `<=>` operator. This tells paperclip to bind both ways. See [binding operators](#binding-operators).\u000a\u000a\u000a#### {{ event: expression }}\u000a\u000aExecuted when an event is fired on the DOM element. Here are all the available events:\u000a\u000a- `onChange` - called when an element changes\u000a- `onClick` - called when an element is clicked\u000a- `onLoad` - called when an element loads - useful for `<img />`\u000a- `onSubmit` - called on submit - useful for `<form />`\u000a- `onMouseDown` - called on mouse down\u000a- `onMouseUp` - called on mouse up\u000a- `onMouseOver` - called on mouse over\u000a- `onMouseOut` - called on mouse out\u000a- `onKeyDown` - called on key down\u000a- `onKeyUp` - called on key up\u000a- `onEnter` - called on enter key up\u000a- `onDepete` - called on delete key up\u000a\u000a[Basic example](http://jsfiddle.net/JTxdM/77/):\u000a\u000a```html\u000a<input type=\"text\" data-bind=\"{{ model: <=>name, onEnter: sayHello() }}\"></input>\u000a```\u000a\u000a\u000a#### {{ show: bool }}\u000a\u000aToggles the display mode of a given element. This is similar to the `{{#if: expression }}` conditional helper.\u000a\u000a\u000a#### {{ css: styles }}\u000a\u000aSets the css of a given element. [For example](http://jsfiddle.net/JTxdM/81/):\u000a\u000a```html\u000a<strong data-bind=\"{{\u000a  css: {\u000a      cool    : temp > 0,\u000a      warm    : temp > 60,\u000a      hot     : temp > 90\u000a  }\u000a}}\"> It's pretty warm! </strong>\u000a```\u000a\u000a#### {{ style: styles }}\u000a\u000aSets the style of a given element. [For example](http://jsfiddle.net/JTxdM/78/):\u000a\u000a```\u000a<span data-bind=\"{{\u000a  style: {\u000a    color       : color,\u000a    'font-size' : size\u000a  }\u000a}}\"> Hello World </span>\u000a```\u000a\u000a#### {{ disable: bool }}\u000a\u000aToggles the enabled state of an element.\u000a\u000a#### Custom data-bind helpers\u000a\u000aTODO\u000a\u000a### Pollyfills\u000a\u000aPollyfills are similar to angular directives, but they should only be used to provide support for features not implemented in older browsers. A good example of this is [paperclip-placeholder-pollyfill](https://github.com/classdojo/paperclip-placeholder-pollyfill). If you need to create a custom component, [create as a block helper](#custom-block-helpers).\u000a\u000a## API\u000a\u000a#### template paperclip.template(sourceOrScriptName)\u000a\u000atranslates the source, or script into a paperclip template. [For example](http://jsfiddle.net/JTxdM/83/).\u000a\u000a#### elements template.bind(context)\u000a\u000aCreates the DOM elements, and binds the elements to the given context.\u000a\u000a#### elements.toFragment()\u000a\u000aCasts the elements as a document fragment.\u000a\u000a#### elements.unbind()\u000a\u000aUnbinds the elements from the given context.\u000a\u000a## Node.js Usage\u000a\u000aYou can easily run paperclip in node. All you need to do is swap out the DOM factory.\u000a\u000a```javascript\u000avar paperclip = require(\"paperclip\"),\u000anofactor      = require(\"nofactor\"),\u000abindable      = require(\"bindable\");\u000a\u000avar template = paperclip.template(\"<h1>Hello {{name}}</h1>\", { nodeFactory: nofactor.string });\u000a\u000avar element = template.bind(new bindable.Object({ name: \"Jon\" })).render();\u000a\u000aconsole.log(renderer.toString());\u000a```\u000a\u000aHere's an example: http://runnable.com/UwVueJLcL9ZTAABN/hello-paperclip-for-node-js\u000a","bugs":{"url":"https://github.com/classdojo/paperclip.js/issues"},"homepage":"https://github.com/classdojo/paperclip.js","_id":"paperclip@0.3.160","_shasum":"e1f8b9111ae7de8f967c60ea1848462cd64877e4","_from":".","_npmVersion":"1.4.24","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"e1f8b9111ae7de8f967c60ea1848462cd64877e4","tarball":"http://registry.npmjs.org/paperclip/-/paperclip-0.3.160.tgz"}}: paperclip
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:300:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:938:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 13.3.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/craig/Developer/Public/paperclip.js
46 error node -v v0.10.30
47 error npm -v 1.4.24
48 verbose exit [ 1, true ]
