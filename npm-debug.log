0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.1.4
3 info using node@v0.10.30
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/craig/Developer/Public/paperclip.js',
7 silly cache add   type: 'directory' }
8 verbose tar pack [ '/Users/craig/.npm/paperclip/0.6.8/package.tgz',
8 verbose tar pack   '/Users/craig/Developer/Public/paperclip.js' ]
9 verbose tarball /Users/craig/.npm/paperclip/0.6.8/package.tgz
10 verbose folder /Users/craig/Developer/Public/paperclip.js
11 info prepublish paperclip@0.6.8
12 verbose addLocalTarball adding from inside cache /Users/craig/.npm/paperclip/0.6.8/package.tgz
13 silly cache afterAdd paperclip@0.6.8
14 verbose afterAdd /Users/craig/.npm/paperclip/0.6.8/package/package.json not in flight; writing
15 verbose afterAdd /Users/craig/.npm/paperclip/0.6.8/package/package.json written
16 silly publish { name: 'paperclip',
16 silly publish   version: '0.6.8',
16 silly publish   description: 'controller logic:',
16 silly publish   main: './lib/index.js',
16 silly publish   scripts: { test: 'mocha ./test/*/*-test.js --ignore-leaks --bail' },
16 silly publish   transform: './lib/transform.js',
16 silly publish   repository: { type: 'git', url: 'https://github.com/ojo-js/paperclip.js' },
16 silly publish   author: '',
16 silly publish   license: 'MIT',
16 silly publish   gitHead: '1336ca5b7f1f0c344a291ace63ddf211d5a94acd',
16 silly publish   readmeFilename: 'README.md',
16 silly publish   devDependencies:
16 silly publish    { benchmark: '~1.0.0',
16 silly publish      'bindable-collection': '0.0.2',
16 silly publish      browserify: '^5.11.1',
16 silly publish      coveralls: '~2.5.0',
16 silly publish      'expect.js': '0.2.x',
16 silly publish      express: '~3.3.4',
16 silly publish      htmlbars: '^0.1.0',
16 silly publish      istanbul: '~0.1.46',
16 silly publish      jquery: '~1.8.3',
16 silly publish      jsdom: '0.10.5',
16 silly publish      mocha: '~1.15.1',
16 silly publish      'mojo-cli': '0.0.22',
16 silly publish      'node-static': '^0.7.6',
16 silly publish      pegjs: '^0.8.0',
16 silly publish      react: '^0.11.2',
16 silly publish      statsjs: '^1.0.6',
16 silly publish      structr: '~0.2.3',
16 silly publish      uglifyjs: '^2.3.6',
16 silly publish      vue: '^0.10.6' },
16 silly publish   bin: { paperclip: './bin/paperclip' },
16 silly publish   dependencies:
16 silly publish    { async: '0.7.x',
16 silly publish      asyngleton: '0.1.x',
16 silly publish      'bindable-object': '0.0.6',
16 silly publish      'document-section': '^0.2.6',
16 silly publish      dref: '0.0.x',
16 silly publish      gaze: '^0.6.4',
16 silly publish      he: '~0.4.1',
16 silly publish      loaf: '0.2.x',
16 silly publish      'mojo-application': '0.1.x',
16 silly publish      nofactor: '0.0.x',
16 silly publish      noselector: '0.0.x',
16 silly publish      optimist: '0.4.x',
16 silly publish      platform: '1.0.x',
16 silly publish      protoclass: '0.0.x',
16 silly publish      runlater: '0.0.x',
16 silly publish      sift: '0.0.12',
16 silly publish      strscanner: '0.0.x',
16 silly publish      'type-component': '0.0.x',
16 silly publish      'uglify-js': '1.3.x',
16 silly publish      underscore: '1.4.x',
16 silly publish      walkr: '0.0.x',
16 silly publish      watch_r: '0.0.x' },
16 silly publish   readme: '\n\nPaperclip is a very fast template engine for JavaScript. \n\n\n### Features\n\n- inline javascript\n- compiled templates\n- explicit data-binding (one-way, two-way, unbound operators)\n- works with older browsers (IE 8+ tested)\n- accepts vanilla objects\n- works with NodeJS\n- supports custom pollyfills\n\n### Examples\n\n- [50k items in 1.5 seconds](http://requirebin.com/?gist=02cb9f69551a6032ad93)\n- [simple number incrementer](http://requirebin.com/?gist=8be78007f4cb70da67b1)\n- [inline html](http://requirebin.com/?gist=bbb9b0eaccd3d7e41df1)\n- [custom block components](http://requirebin.com/?gist=858e3b7928eea5e1bed6)\n- [each block](http://requirebin.com/?gist=d716391c84986bdf4878)\n\n\n### Performance\n\n\nPaperclip templates are translated from HTML, straight to JavaScript - this also includes data-bindings. For example, here\'s a template:\n\n```html\nhello {{name}}!\n```\n\nHere\'s the templated translated to JavaScript:\n\n```javascript\nmodule.exports = (function(fragment, block, element, text, comment, parser, modifiers) {\n  return fragment([text("hello "), block({\n    \'value\': {\n      run: function() {\n          return this.context.name;\n      },\n      refs: [ ["name"] ]\n    }\n  })]);\n});\n```\n\nPretty clear what\'s going on. Here\'s what we know at a glance:\n\n<!--\nMore stuff here - no innerHTML, DOM abstractions. Generated template item is a DOM element.\n-->\n\n1. Generated DOM is identical to the HTML templates. No weird manipulations here.\n2. Data-bindings are identified *as the template is created*. Note that this happens *once* for every template. Paperclip takes each translated template, caches them, and uses the browser\'s native `cloneNode()` whenever a template is used. \n3. JavaScript references within the templates are identified at translation time, and cached in the data-binding.\n\nAs it turns out, the method above for generating templates is very efficient. Essentially, paperclip does the least amount of work necessary to update the DOM since it know where everything is. \n\nPaperclip will also lazily batch DOM changes together into one update, and run them on requestAnimationFrame. This kind of optimization is similar to how layout engines work, and helps prevent\nunnecessary performance penalties in the browser.\n\n\n### Installation\n\n```\nnpm install paperclip --save-exact\n```\n\n## Basic API\n\n#### template template(source)\n\nCreates a new template\n\n```javascript\nvar pc = require("paperclip");\nvar template = pc.template("hello {{name}}!");\n```\n\n#### template.bind(context).render()\n\n`context` - Object, or [BindableObject](https://github.com/mojo-js/bindable-object.js)\n\nbinds the template to a context, and returns a document fragment\n\n```javascript\nvar pc = require("paperclip");\nvar template = pc.template("hello {{name}}!");\nvar view = template.bind({ name: "Bull Murray" });\ndocument.body.appendChild(view.render()); // will show "hello Bill Murray"\n```\n\n#### paperclip.modifier(modifierName, modifier)\n\nregisters a new modifier. Here\'s a [markdown example](http://requirebin.com/?gist=d8ab295c936e577a172f):\n\n```javascript\nvar pc = require("paperclip");\npc.modifier("markdown", require("marked"));\nvar template = pc.template("{{ content | markdown }}");\ndocument.body.appendChild(template.bind({\n  content: "hello **world**!"\n}).render());\n```\n\n\n\n## Template Syntax\n\n#### {{ blocks }}\n\nVariable blocks as placeholders for information that might change. For example:\n\n\n```html\nhello {{ name.first }} {{ name.last }}!\n```\n\nYou can also specify blocks within attributes.\n\n```html\nmy favorite color is <span style="color: {{color}}">{{color}}</span>\n```\n\nPaperclip also supports **inline javascript**. For example:\n\n```html\nhello {{ message || "World" }}! <br />\ninline-json {{ {\'5+10 is\':5+10, \'message is defined?\' : message ? \'yes\' : \'no\' } | json }}\n```\n\n### Modifiers\n\nModifiers format data in a variable block. A good example of this might be presenting data to the user depending on their locale, or parsing data into markdown. Here are a few examples of how you can use\nmodifiers:\n\n\n```html\n\nConverting content to markdown:\n\n{{ html: content | markdown }}\n\nUppercasing & converting to markdown:\n\n{{ html: content | uppercase | markdown }}\n\nModifiers with parameters:\n\nA human that is {{age}} years old is like a {{ age | divide(5.6) }} year old dog!\n```\n\n\n### Binding Operators\n\nPaperclip comes with various binding operators that give you full control over how references are handled. You can easily\nspecify whether to bind one way, two ways, or not at all. Here\'s the basic syntax:\n\n```javascript\nTwo-way binding:\n<input class="form-control" data-bind="{{ model: <~>fullName }}" />\n\nBind input value to fullName only:\n<input class="form-control" data-bind="{{ model: ~>fullName }}" />\n\nBind fullName to input value only:\n\n<input class="form-control" data-bind="{{ model: <~fullName }}" />\n\nUnbound helper - don\'t watch for any changes:\n{{ ~fullName }}\n```\n\n### Built-in components\n\n#### {{ html: content }}\n\nSimilar to escaping content in mustache (`{{{content}}}`). Good for security.\n\n```html\nUnsafe:\n{{ html: content }} <br />\n\nSafe:\n{{ content }} <br />\n```\n\n#### {{ #if: condition }}\n\nConditional block helper\n\n```html\n<input type="text" class="form-control" placeholder="What\'s your age?" data-bind="{{ model: <~>age }}"></input>\n{{#if: age >= 18 }}\n  You\'re legally able to vote in the U.S.\n{{/elseif: age > 16 }}\n  You\'re almost old enough to vote in the U.S.\n{{/else}}\n  You\'re too young to vote in the U.S.\n{{/}}\n```\n\n### data-bind attributes\n\ndata-bind attributes are inspired by [knockout.js](http://knockoutjs.com/). This is useful if you want to attach behavior to any DOM element.\n\n\n#### {{ model: context }}\n\nInput data-binding\n\n```html\n<input type="text" class="form-control" placeholder="Type in a message" data-bind="{{ model: <~>message }}"></input>\n<h3>{{message}}</h3>\n```\n\nNotice the `<~>` operator. This tells paperclip to bind both ways. See [binding operators](#binding-operators) for more info.\n\n#### {{ event: expression }}\n\nExecuted when an event is fired on the DOM element. Here are all the available events:\n\n- `onChange` - called when an element changes\n- `onClick` - called when an element is clicked\n- `onLoad` - called when an element loads - useful for `&lt;img /&gt;`\n- `onSubmit` - called on submit - useful for `&lt;form /&gt;`\n- `onMouseDown` - called on mouse down\n- `onMouseUp` - called on mouse up\n- `onMouseOver` - called on mouse over\n- `onMouseOut` - called on mouse out\n- `onKeyDown` - called on key down\n- `onKeyUp` - called on key up\n- `onEnter` - called on enter key up\n- `onDelete` - called on delete key up\n\n```html\n<input type="text" class="form-control" placeholder="Type in a message" data-bind="{{ onEnter: enterPressed = true, focus: true }}"></input>\n\n{{#if: enterPressed }}\n  enter pressed\n{{/}}\n```\n\n\n#### {{ show: bool }}\n\nToggles the display mode of a given element. This is similar to the `{{if:expression}}` conditional helper.\n\n\n#### {{ css: styles }}\n\nSets the css of a given element. [For example](http://jsfiddle.net/JTxdM/81/):\n\n```html\nhow hot is it (fahrenheit)?: <input type="text" class="form-control" data-bind="{{ model: <~>temp }}"></input> <br />\n\n<style type="text/css">\n.cool { color: blue;   }\n.warm { color: yellow; }\n.hot  { color: red;    }\n</style>\n\n<strong data-bind="{{\n  css: {\n    cool    : temp > 0 || !temp,\n    warm    : temp > 60,\n    hot     : temp > 90\n  }\n}}">\n  {{\n    temp > 60 ?\n    temp > 90 ? "it\'s hot" : "it\'s warm" :\n    "it\'s cool"\n  }}\n</strong>\n```\n\n#### {{ style: styles }}\n\nSets the style of a given element.\n\n```html\ncolor: <input type="text" data-bind="{{ model: <~>color }}" class="form-control"></input> <br />\nsize: <input type="text" data-bind="{{ model: <~>size }}" class="form-control"></input> <br />\n<span data-bind="{{\n  style: {\n    color       : color,\n    \'font-size\' : size\n  }\n}}">Hello World</span>\n```\n\n#### {{ disable: bool }}\n\nToggles the enabled state of an element.\n\n```html\n<button data-bind={{ disable: !formIsValid }}>Sign Up</button>\n```\n\n#### {{ focus: bool }}\n\nFocuses cursor on an element.\n\n```html\n<input data-bind={{ focus: true }}></input>\n```\n\n### Advanced API\n\n#### paperclip.blockBinding(name, blockBindingClass)\n\nRegisters a new block binding class. Block bindings allow you to modify how templates behave. Some examples\ninclude the `{{#if:condition}}{{/}}`, and `{{html:content}}`.\n\n#### BaseBlockBinding(options)\n\nBase class to extend when creating custom block bindings. Here\'s an example for a [components binding](http://requirebin.com/?gist=858e3b7928eea5e1bed6):\n\n```javascript\nvar pc = require("paperclip");\n\nvar ComponentBlockBinding = pc.BaseBlockBinding.extend({\n  bind: function (context) {\n    this.view = this.template.bind();\n    this.section.appendChild(this.view.render());\n    pc.BaseBlockBinding.prototype.bind.call(this, context);\n  },\n  _onChange: function (properties) {\n    this.view.context.setProperties(properties);\n  }\n});\n\npc.blockBinding("hello", ComponentBlockBinding.extend({\n  hello: pc.template("hello <strong>{{message}}</strong>!")\n});\n```\n\ntemplate:\n\n```html\n{{ hello: { message: "world" }}}\n```\n\n#### override bind(context)\n\nCalled when the block is added, and bound to the DOM. This is where you initialize your binding.\nBe sure to call `paperclip.BaseBlockBinding.prototype.bind.call(this, context)` if you override.\nthis method\n\n#### override unbind()\n\nCalled when the block is removed from the DOM. This is a cleanup method.\n\n#### override _onChange(context)\n\nCalled whenever the properties change for the block binding. These properties are defined in the\ntemplate. Here\'s the syntax:\n\n```html\n{{blockName: blockProperties }}\n```\n\n#### nodeFactory\n\nthe [node factory](https://github.com/mojo-js/nofactor.js) for creating elements. Use this to\nmake your block binding compatible with the NodeJS and the browser.\n\n#### scriptName\n\nthe name registered for the block binding\n\n#### section\n\nthe [document section](https://github.com/mojo-js/document-section.js) which contains all the elements\n\n#### contentTemplate\n\nthe content template - this might be undefined if your block binding doesn\'t have `{{#block:properties}}content{{/}}`.\n\n#### childBlockTemplate\n\nThe child block template. Used in the [conditional block](https://github.com/mojo-js/paperclip.js/blob/master/lib/paper/bindings/block/conditional.js).\n\n\n',
16 silly publish   bugs: { url: 'https://github.com/ojo-js/paperclip.js/issues' },
16 silly publish   homepage: 'https://github.com/ojo-js/paperclip.js',
16 silly publish   _id: 'paperclip@0.6.8',
16 silly publish   _shasum: 'dd79985f52179ad1b659f5946f92cb80b513c552',
16 silly publish   _from: '.' }
17 verbose mapToRegistry name paperclip
18 verbose mapToRegistry uri http://registry.npmjs.org/paperclip
19 verbose publish registryBase http://registry.npmjs.org/
20 verbose request on initialization, where is /paperclip
21 verbose request after pass 1, where is /paperclip
22 verbose request url raw /paperclip
23 verbose request resolving registry [ 'http://registry.npmjs.org/', './paperclip' ]
24 verbose request after pass 2, where is http://registry.npmjs.org/paperclip
25 verbose request sending authorization for write operation
26 info attempt registry request try #1 at 10:25:08
27 verbose request id 4c12627da6755779
28 http request PUT http://registry.npmjs.org/paperclip
29 http 403 http://registry.npmjs.org/paperclip
30 verbose headers { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
30 verbose headers   'content-type': 'application/json',
30 verbose headers   'cache-control': 'max-age=60',
30 verbose headers   'content-length': '17194',
30 verbose headers   'accept-ranges': 'bytes',
30 verbose headers   date: 'Wed, 29 Oct 2014 17:25:10 GMT',
30 verbose headers   via: '1.1 varnish',
30 verbose headers   connection: 'keep-alive',
30 verbose headers   'x-served-by': 'cache-lax1426-LAX',
30 verbose headers   'x-cache': 'MISS',
30 verbose headers   'x-cache-hits': '0',
30 verbose headers   'x-timer': 'S1414603508.416037,VS0,VE1600' }
31 error publish Failed PUT 403
32 verbose stack Error: forbidden cannot modify pre-existing version: 0.6.8
32 verbose stack old={"name":"paperclip","version":"0.6.8","description":"controller logic:","main":"./lib/index.js","scripts":{"test":"mocha ./test/*/*-test.js --ignore-leaks --bail"},"transform":"./lib/transform.js","repository":{"type":"git","url":"https://github.com/ojo-js/paperclip.js"},"author":"","license":"MIT","gitHead":"1336ca5b7f1f0c344a291ace63ddf211d5a94acd","devDependencies":{"benchmark":"~1.0.0","bindable-collection":"0.0.2","browserify":"^5.11.1","coveralls":"~2.5.0","expect.js":"0.2.x","express":"~3.3.4","htmlbars":"^0.1.0","istanbul":"~0.1.46","jquery":"~1.8.3","jsdom":"0.10.5","mocha":"~1.15.1","mojo-cli":"0.0.22","node-static":"^0.7.6","pegjs":"^0.8.0","react":"^0.11.2","statsjs":"^1.0.6","structr":"~0.2.3","uglifyjs":"^2.3.6","vue":"^0.10.6"},"bin":{"paperclip":"./bin/paperclip"},"dependencies":{"async":"0.7.x","asyngleton":"0.1.x","bindable-object":"0.0.6","document-section":"^0.2.6","dref":"0.0.x","gaze":"^0.6.4","he":"~0.4.1","loaf":"0.2.x","mojo-application":"0.1.x","nofactor":"0.0.x","noselector":"0.0.x","optimist":"0.4.x","platform":"1.0.x","protoclass":"0.0.x","runlater":"0.0.x","sift":"0.0.12","strscanner":"0.0.x","type-component":"0.0.x","uglify-js":"1.3.x","underscore":"1.4.x","walkr":"0.0.x","watch_r":"0.0.x"},"bugs":{"url":"https://github.com/ojo-js/paperclip.js/issues"},"homepage":"https://github.com/ojo-js/paperclip.js","_id":"paperclip@0.6.8","_shasum":"36444065a7a630b8a22bd2be05d8a0e94f80d6c6","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.30","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"36444065a7a630b8a22bd2be05d8a0e94f80d6c6","tarball":"http://registry.npmjs.org/paperclip/-/paperclip-0.6.8.tgz"}}
32 verbose stack new={"name":"paperclip","version":"0.6.8","description":"controller logic:","main":"./lib/index.js","scripts":{"test":"mocha ./test/*/*-test.js --ignore-leaks --bail"},"transform":"./lib/transform.js","repository":{"type":"git","url":"https://github.com/ojo-js/paperclip.js"},"author":"","license":"MIT","gitHead":"1336ca5b7f1f0c344a291ace63ddf211d5a94acd","readmeFilename":"README.md","devDependencies":{"benchmark":"~1.0.0","bindable-collection":"0.0.2","browserify":"^5.11.1","coveralls":"~2.5.0","expect.js":"0.2.x","express":"~3.3.4","htmlbars":"^0.1.0","istanbul":"~0.1.46","jquery":"~1.8.3","jsdom":"0.10.5","mocha":"~1.15.1","mojo-cli":"0.0.22","node-static":"^0.7.6","pegjs":"^0.8.0","react":"^0.11.2","statsjs":"^1.0.6","structr":"~0.2.3","uglifyjs":"^2.3.6","vue":"^0.10.6"},"bin":{"paperclip":"./bin/paperclip"},"dependencies":{"async":"0.7.x","asyngleton":"0.1.x","bindable-object":"0.0.6","document-section":"^0.2.6","dref":"0.0.x","gaze":"^0.6.4","he":"~0.4.1","loaf":"0.2.x","mojo-application":"0.1.x","nofactor":"0.0.x","noselector":"0.0.x","optimist":"0.4.x","platform":"1.0.x","protoclass":"0.0.x","runlater":"0.0.x","sift":"0.0.12","strscanner":"0.0.x","type-component":"0.0.x","uglify-js":"1.3.x","underscore":"1.4.x","walkr":"0.0.x","watch_r":"0.0.x"},"readme":"\u000a\u000aPaperclip is a very fast template engine for JavaScript. \u000a\u000a\u000a### Features\u000a\u000a- inline javascript\u000a- compiled templates\u000a- explicit data-binding (one-way, two-way, unbound operators)\u000a- works with older browsers (IE 8+ tested)\u000a- accepts vanilla objects\u000a- works with NodeJS\u000a- supports custom pollyfills\u000a\u000a### Examples\u000a\u000a- [50k items in 1.5 seconds](http://requirebin.com/?gist=02cb9f69551a6032ad93)\u000a- [simple number incrementer](http://requirebin.com/?gist=8be78007f4cb70da67b1)\u000a- [inline html](http://requirebin.com/?gist=bbb9b0eaccd3d7e41df1)\u000a- [custom block components](http://requirebin.com/?gist=858e3b7928eea5e1bed6)\u000a- [each block](http://requirebin.com/?gist=d716391c84986bdf4878)\u000a\u000a\u000a### Performance\u000a\u000a\u000aPaperclip templates are translated from HTML, straight to JavaScript - this also includes data-bindings. For example, here's a template:\u000a\u000a```html\u000ahello {{name}}!\u000a```\u000a\u000aHere's the templated translated to JavaScript:\u000a\u000a```javascript\u000amodule.exports = (function(fragment, block, element, text, comment, parser, modifiers) {\u000a  return fragment([text(\"hello \"), block({\u000a    'value': {\u000a      run: function() {\u000a          return this.context.name;\u000a      },\u000a      refs: [ [\"name\"] ]\u000a    }\u000a  })]);\u000a});\u000a```\u000a\u000aPretty clear what's going on. Here's what we know at a glance:\u000a\u000a<!--\u000aMore stuff here - no innerHTML, DOM abstractions. Generated template item is a DOM element.\u000a-->\u000a\u000a1. Generated DOM is identical to the HTML templates. No weird manipulations here.\u000a2. Data-bindings are identified *as the template is created*. Note that this happens *once* for every template. Paperclip takes each translated template, caches them, and uses the browser's native `cloneNode()` whenever a template is used. \u000a3. JavaScript references within the templates are identified at translation time, and cached in the data-binding.\u000a\u000aAs it turns out, the method above for generating templates is very efficient. Essentially, paperclip does the least amount of work necessary to update the DOM since it know where everything is. \u000a\u000aPaperclip will also lazily batch DOM changes together into one update, and run them on requestAnimationFrame. This kind of optimization is similar to how layout engines work, and helps prevent\u000aunnecessary performance penalties in the browser.\u000a\u000a\u000a### Installation\u000a\u000a```\u000anpm install paperclip --save-exact\u000a```\u000a\u000a## Basic API\u000a\u000a#### template template(source)\u000a\u000aCreates a new template\u000a\u000a```javascript\u000avar pc = require(\"paperclip\");\u000avar template = pc.template(\"hello {{name}}!\");\u000a```\u000a\u000a#### template.bind(context).render()\u000a\u000a`context` - Object, or [BindableObject](https://github.com/mojo-js/bindable-object.js)\u000a\u000abinds the template to a context, and returns a document fragment\u000a\u000a```javascript\u000avar pc = require(\"paperclip\");\u000avar template = pc.template(\"hello {{name}}!\");\u000avar view = template.bind({ name: \"Bull Murray\" });\u000adocument.body.appendChild(view.render()); // will show \"hello Bill Murray\"\u000a```\u000a\u000a#### paperclip.modifier(modifierName, modifier)\u000a\u000aregisters a new modifier. Here's a [markdown example](http://requirebin.com/?gist=d8ab295c936e577a172f):\u000a\u000a```javascript\u000avar pc = require(\"paperclip\");\u000apc.modifier(\"markdown\", require(\"marked\"));\u000avar template = pc.template(\"{{ content | markdown }}\");\u000adocument.body.appendChild(template.bind({\u000a  content: \"hello **world**!\"\u000a}).render());\u000a```\u000a\u000a\u000a\u000a## Template Syntax\u000a\u000a#### {{ blocks }}\u000a\u000aVariable blocks as placeholders for information that might change. For example:\u000a\u000a\u000a```html\u000ahello {{ name.first }} {{ name.last }}!\u000a```\u000a\u000aYou can also specify blocks within attributes.\u000a\u000a```html\u000amy favorite color is <span style=\"color: {{color}}\">{{color}}</span>\u000a```\u000a\u000aPaperclip also supports **inline javascript**. For example:\u000a\u000a```html\u000ahello {{ message || \"World\" }}! <br />\u000ainline-json {{ {'5+10 is':5+10, 'message is defined?' : message ? 'yes' : 'no' } | json }}\u000a```\u000a\u000a### Modifiers\u000a\u000aModifiers format data in a variable block. A good example of this might be presenting data to the user depending on their locale, or parsing data into markdown. Here are a few examples of how you can use\u000amodifiers:\u000a\u000a\u000a```html\u000a\u000aConverting content to markdown:\u000a\u000a{{ html: content | markdown }}\u000a\u000aUppercasing & converting to markdown:\u000a\u000a{{ html: content | uppercase | markdown }}\u000a\u000aModifiers with parameters:\u000a\u000aA human that is {{age}} years old is like a {{ age | divide(5.6) }} year old dog!\u000a```\u000a\u000a\u000a### Binding Operators\u000a\u000aPaperclip comes with various binding operators that give you full control over how references are handled. You can easily\u000aspecify whether to bind one way, two ways, or not at all. Here's the basic syntax:\u000a\u000a```javascript\u000aTwo-way binding:\u000a<input class=\"form-control\" data-bind=\"{{ model: <~>fullName }}\" />\u000a\u000aBind input value to fullName only:\u000a<input class=\"form-control\" data-bind=\"{{ model: ~>fullName }}\" />\u000a\u000aBind fullName to input value only:\u000a\u000a<input class=\"form-control\" data-bind=\"{{ model: <~fullName }}\" />\u000a\u000aUnbound helper - don't watch for any changes:\u000a{{ ~fullName }}\u000a```\u000a\u000a### Built-in components\u000a\u000a#### {{ html: content }}\u000a\u000aSimilar to escaping content in mustache (`{{{content}}}`). Good for security.\u000a\u000a```html\u000aUnsafe:\u000a{{ html: content }} <br />\u000a\u000aSafe:\u000a{{ content }} <br />\u000a```\u000a\u000a#### {{ #if: condition }}\u000a\u000aConditional block helper\u000a\u000a```html\u000a<input type=\"text\" class=\"form-control\" placeholder=\"What's your age?\" data-bind=\"{{ model: <~>age }}\"></input>\u000a{{#if: age >= 18 }}\u000a  You're legally able to vote in the U.S.\u000a{{/elseif: age > 16 }}\u000a  You're almost old enough to vote in the U.S.\u000a{{/else}}\u000a  You're too young to vote in the U.S.\u000a{{/}}\u000a```\u000a\u000a### data-bind attributes\u000a\u000adata-bind attributes are inspired by [knockout.js](http://knockoutjs.com/). This is useful if you want to attach behavior to any DOM element.\u000a\u000a\u000a#### {{ model: context }}\u000a\u000aInput data-binding\u000a\u000a```html\u000a<input type=\"text\" class=\"form-control\" placeholder=\"Type in a message\" data-bind=\"{{ model: <~>message }}\"></input>\u000a<h3>{{message}}</h3>\u000a```\u000a\u000aNotice the `<~>` operator. This tells paperclip to bind both ways. See [binding operators](#binding-operators) for more info.\u000a\u000a#### {{ event: expression }}\u000a\u000aExecuted when an event is fired on the DOM element. Here are all the available events:\u000a\u000a- `onChange` - called when an element changes\u000a- `onClick` - called when an element is clicked\u000a- `onLoad` - called when an element loads - useful for `&lt;img /&gt;`\u000a- `onSubmit` - called on submit - useful for `&lt;form /&gt;`\u000a- `onMouseDown` - called on mouse down\u000a- `onMouseUp` - called on mouse up\u000a- `onMouseOver` - called on mouse over\u000a- `onMouseOut` - called on mouse out\u000a- `onKeyDown` - called on key down\u000a- `onKeyUp` - called on key up\u000a- `onEnter` - called on enter key up\u000a- `onDelete` - called on delete key up\u000a\u000a```html\u000a<input type=\"text\" class=\"form-control\" placeholder=\"Type in a message\" data-bind=\"{{ onEnter: enterPressed = true, focus: true }}\"></input>\u000a\u000a{{#if: enterPressed }}\u000a  enter pressed\u000a{{/}}\u000a```\u000a\u000a\u000a#### {{ show: bool }}\u000a\u000aToggles the display mode of a given element. This is similar to the `{{if:expression}}` conditional helper.\u000a\u000a\u000a#### {{ css: styles }}\u000a\u000aSets the css of a given element. [For example](http://jsfiddle.net/JTxdM/81/):\u000a\u000a```html\u000ahow hot is it (fahrenheit)?: <input type=\"text\" class=\"form-control\" data-bind=\"{{ model: <~>temp }}\"></input> <br />\u000a\u000a<style type=\"text/css\">\u000a.cool { color: blue;   }\u000a.warm { color: yellow; }\u000a.hot  { color: red;    }\u000a</style>\u000a\u000a<strong data-bind=\"{{\u000a  css: {\u000a    cool    : temp > 0 || !temp,\u000a    warm    : temp > 60,\u000a    hot     : temp > 90\u000a  }\u000a}}\">\u000a  {{\u000a    temp > 60 ?\u000a    temp > 90 ? \"it's hot\" : \"it's warm\" :\u000a    \"it's cool\"\u000a  }}\u000a</strong>\u000a```\u000a\u000a#### {{ style: styles }}\u000a\u000aSets the style of a given element.\u000a\u000a```html\u000acolor: <input type=\"text\" data-bind=\"{{ model: <~>color }}\" class=\"form-control\"></input> <br />\u000asize: <input type=\"text\" data-bind=\"{{ model: <~>size }}\" class=\"form-control\"></input> <br />\u000a<span data-bind=\"{{\u000a  style: {\u000a    color       : color,\u000a    'font-size' : size\u000a  }\u000a}}\">Hello World</span>\u000a```\u000a\u000a#### {{ disable: bool }}\u000a\u000aToggles the enabled state of an element.\u000a\u000a```html\u000a<button data-bind={{ disable: !formIsValid }}>Sign Up</button>\u000a```\u000a\u000a#### {{ focus: bool }}\u000a\u000aFocuses cursor on an element.\u000a\u000a```html\u000a<input data-bind={{ focus: true }}></input>\u000a```\u000a\u000a### Advanced API\u000a\u000a#### paperclip.blockBinding(name, blockBindingClass)\u000a\u000aRegisters a new block binding class. Block bindings allow you to modify how templates behave. Some examples\u000ainclude the `{{#if:condition}}{{/}}`, and `{{html:content}}`.\u000a\u000a#### BaseBlockBinding(options)\u000a\u000aBase class to extend when creating custom block bindings. Here's an example for a [components binding](http://requirebin.com/?gist=858e3b7928eea5e1bed6):\u000a\u000a```javascript\u000avar pc = require(\"paperclip\");\u000a\u000avar ComponentBlockBinding = pc.BaseBlockBinding.extend({\u000a  bind: function (context) {\u000a    this.view = this.template.bind();\u000a    this.section.appendChild(this.view.render());\u000a    pc.BaseBlockBinding.prototype.bind.call(this, context);\u000a  },\u000a  _onChange: function (properties) {\u000a    this.view.context.setProperties(properties);\u000a  }\u000a});\u000a\u000apc.blockBinding(\"hello\", ComponentBlockBinding.extend({\u000a  hello: pc.template(\"hello <strong>{{message}}</strong>!\")\u000a});\u000a```\u000a\u000atemplate:\u000a\u000a```html\u000a{{ hello: { message: \"world\" }}}\u000a```\u000a\u000a#### override bind(context)\u000a\u000aCalled when the block is added, and bound to the DOM. This is where you initialize your binding.\u000aBe sure to call `paperclip.BaseBlockBinding.prototype.bind.call(this, context)` if you override.\u000athis method\u000a\u000a#### override unbind()\u000a\u000aCalled when the block is removed from the DOM. This is a cleanup method.\u000a\u000a#### override _onChange(context)\u000a\u000aCalled whenever the properties change for the block binding. These properties are defined in the\u000atemplate. Here's the syntax:\u000a\u000a```html\u000a{{blockName: blockProperties }}\u000a```\u000a\u000a#### nodeFactory\u000a\u000athe [node factory](https://github.com/mojo-js/nofactor.js) for creating elements. Use this to\u000amake your block binding compatible with the NodeJS and the browser.\u000a\u000a#### scriptName\u000a\u000athe name registered for the block binding\u000a\u000a#### section\u000a\u000athe [document section](https://github.com/mojo-js/document-section.js) which contains all the elements\u000a\u000a#### contentTemplate\u000a\u000athe content template - this might be undefined if your block binding doesn't have `{{#block:properties}}content{{/}}`.\u000a\u000a#### childBlockTemplate\u000a\u000aThe child block template. Used in the [conditional block](https://github.com/mojo-js/paperclip.js/blob/master/lib/paper/bindings/block/conditional.js).\u000a\u000a\u000a","bugs":{"url":"https://github.com/ojo-js/paperclip.js/issues"},"homepage":"https://github.com/ojo-js/paperclip.js","_id":"paperclip@0.6.8","_shasum":"dd79985f52179ad1b659f5946f92cb80b513c552","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.30","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"dd79985f52179ad1b659f5946f92cb80b513c552","tarball":"http://registry.npmjs.org/paperclip/-/paperclip-0.6.8.tgz"}}: paperclip
32 verbose stack     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:260:14)
32 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:197:65)
32 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:237:22)
32 verbose stack     at Request.emit (events.js:98:17)
32 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1146:14)
32 verbose stack     at Request.emit (events.js:117:20)
32 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1097:12)
32 verbose stack     at IncomingMessage.emit (events.js:117:20)
32 verbose stack     at _stream_readable.js:938:16
32 verbose stack     at process._tickCallback (node.js:419:13)
33 verbose statusCode 403
34 verbose pkgid paperclip
35 verbose cwd /Users/craig/Developer/Public/paperclip.js
36 error Darwin 14.0.0
37 error argv "node" "/usr/local/bin/npm" "publish"
38 error node v0.10.30
39 error npm  v2.1.4
40 error code E403
41 error forbidden cannot modify pre-existing version: 0.6.8
41 error old={"name":"paperclip","version":"0.6.8","description":"controller logic:","main":"./lib/index.js","scripts":{"test":"mocha ./test/*/*-test.js --ignore-leaks --bail"},"transform":"./lib/transform.js","repository":{"type":"git","url":"https://github.com/ojo-js/paperclip.js"},"author":"","license":"MIT","gitHead":"1336ca5b7f1f0c344a291ace63ddf211d5a94acd","devDependencies":{"benchmark":"~1.0.0","bindable-collection":"0.0.2","browserify":"^5.11.1","coveralls":"~2.5.0","expect.js":"0.2.x","express":"~3.3.4","htmlbars":"^0.1.0","istanbul":"~0.1.46","jquery":"~1.8.3","jsdom":"0.10.5","mocha":"~1.15.1","mojo-cli":"0.0.22","node-static":"^0.7.6","pegjs":"^0.8.0","react":"^0.11.2","statsjs":"^1.0.6","structr":"~0.2.3","uglifyjs":"^2.3.6","vue":"^0.10.6"},"bin":{"paperclip":"./bin/paperclip"},"dependencies":{"async":"0.7.x","asyngleton":"0.1.x","bindable-object":"0.0.6","document-section":"^0.2.6","dref":"0.0.x","gaze":"^0.6.4","he":"~0.4.1","loaf":"0.2.x","mojo-application":"0.1.x","nofactor":"0.0.x","noselector":"0.0.x","optimist":"0.4.x","platform":"1.0.x","protoclass":"0.0.x","runlater":"0.0.x","sift":"0.0.12","strscanner":"0.0.x","type-component":"0.0.x","uglify-js":"1.3.x","underscore":"1.4.x","walkr":"0.0.x","watch_r":"0.0.x"},"bugs":{"url":"https://github.com/ojo-js/paperclip.js/issues"},"homepage":"https://github.com/ojo-js/paperclip.js","_id":"paperclip@0.6.8","_shasum":"36444065a7a630b8a22bd2be05d8a0e94f80d6c6","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.30","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"36444065a7a630b8a22bd2be05d8a0e94f80d6c6","tarball":"http://registry.npmjs.org/paperclip/-/paperclip-0.6.8.tgz"}}
41 error new={"name":"paperclip","version":"0.6.8","description":"controller logic:","main":"./lib/index.js","scripts":{"test":"mocha ./test/*/*-test.js --ignore-leaks --bail"},"transform":"./lib/transform.js","repository":{"type":"git","url":"https://github.com/ojo-js/paperclip.js"},"author":"","license":"MIT","gitHead":"1336ca5b7f1f0c344a291ace63ddf211d5a94acd","readmeFilename":"README.md","devDependencies":{"benchmark":"~1.0.0","bindable-collection":"0.0.2","browserify":"^5.11.1","coveralls":"~2.5.0","expect.js":"0.2.x","express":"~3.3.4","htmlbars":"^0.1.0","istanbul":"~0.1.46","jquery":"~1.8.3","jsdom":"0.10.5","mocha":"~1.15.1","mojo-cli":"0.0.22","node-static":"^0.7.6","pegjs":"^0.8.0","react":"^0.11.2","statsjs":"^1.0.6","structr":"~0.2.3","uglifyjs":"^2.3.6","vue":"^0.10.6"},"bin":{"paperclip":"./bin/paperclip"},"dependencies":{"async":"0.7.x","asyngleton":"0.1.x","bindable-object":"0.0.6","document-section":"^0.2.6","dref":"0.0.x","gaze":"^0.6.4","he":"~0.4.1","loaf":"0.2.x","mojo-application":"0.1.x","nofactor":"0.0.x","noselector":"0.0.x","optimist":"0.4.x","platform":"1.0.x","protoclass":"0.0.x","runlater":"0.0.x","sift":"0.0.12","strscanner":"0.0.x","type-component":"0.0.x","uglify-js":"1.3.x","underscore":"1.4.x","walkr":"0.0.x","watch_r":"0.0.x"},"readme":"\u000a\u000aPaperclip is a very fast template engine for JavaScript. \u000a\u000a\u000a### Features\u000a\u000a- inline javascript\u000a- compiled templates\u000a- explicit data-binding (one-way, two-way, unbound operators)\u000a- works with older browsers (IE 8+ tested)\u000a- accepts vanilla objects\u000a- works with NodeJS\u000a- supports custom pollyfills\u000a\u000a### Examples\u000a\u000a- [50k items in 1.5 seconds](http://requirebin.com/?gist=02cb9f69551a6032ad93)\u000a- [simple number incrementer](http://requirebin.com/?gist=8be78007f4cb70da67b1)\u000a- [inline html](http://requirebin.com/?gist=bbb9b0eaccd3d7e41df1)\u000a- [custom block components](http://requirebin.com/?gist=858e3b7928eea5e1bed6)\u000a- [each block](http://requirebin.com/?gist=d716391c84986bdf4878)\u000a\u000a\u000a### Performance\u000a\u000a\u000aPaperclip templates are translated from HTML, straight to JavaScript - this also includes data-bindings. For example, here's a template:\u000a\u000a```html\u000ahello {{name}}!\u000a```\u000a\u000aHere's the templated translated to JavaScript:\u000a\u000a```javascript\u000amodule.exports = (function(fragment, block, element, text, comment, parser, modifiers) {\u000a  return fragment([text(\"hello \"), block({\u000a    'value': {\u000a      run: function() {\u000a          return this.context.name;\u000a      },\u000a      refs: [ [\"name\"] ]\u000a    }\u000a  })]);\u000a});\u000a```\u000a\u000aPretty clear what's going on. Here's what we know at a glance:\u000a\u000a<!--\u000aMore stuff here - no innerHTML, DOM abstractions. Generated template item is a DOM element.\u000a-->\u000a\u000a1. Generated DOM is identical to the HTML templates. No weird manipulations here.\u000a2. Data-bindings are identified *as the template is created*. Note that this happens *once* for every template. Paperclip takes each translated template, caches them, and uses the browser's native `cloneNode()` whenever a template is used. \u000a3. JavaScript references within the templates are identified at translation time, and cached in the data-binding.\u000a\u000aAs it turns out, the method above for generating templates is very efficient. Essentially, paperclip does the least amount of work necessary to update the DOM since it know where everything is. \u000a\u000aPaperclip will also lazily batch DOM changes together into one update, and run them on requestAnimationFrame. This kind of optimization is similar to how layout engines work, and helps prevent\u000aunnecessary performance penalties in the browser.\u000a\u000a\u000a### Installation\u000a\u000a```\u000anpm install paperclip --save-exact\u000a```\u000a\u000a## Basic API\u000a\u000a#### template template(source)\u000a\u000aCreates a new template\u000a\u000a```javascript\u000avar pc = require(\"paperclip\");\u000avar template = pc.template(\"hello {{name}}!\");\u000a```\u000a\u000a#### template.bind(context).render()\u000a\u000a`context` - Object, or [BindableObject](https://github.com/mojo-js/bindable-object.js)\u000a\u000abinds the template to a context, and returns a document fragment\u000a\u000a```javascript\u000avar pc = require(\"paperclip\");\u000avar template = pc.template(\"hello {{name}}!\");\u000avar view = template.bind({ name: \"Bull Murray\" });\u000adocument.body.appendChild(view.render()); // will show \"hello Bill Murray\"\u000a```\u000a\u000a#### paperclip.modifier(modifierName, modifier)\u000a\u000aregisters a new modifier. Here's a [markdown example](http://requirebin.com/?gist=d8ab295c936e577a172f):\u000a\u000a```javascript\u000avar pc = require(\"paperclip\");\u000apc.modifier(\"markdown\", require(\"marked\"));\u000avar template = pc.template(\"{{ content | markdown }}\");\u000adocument.body.appendChild(template.bind({\u000a  content: \"hello **world**!\"\u000a}).render());\u000a```\u000a\u000a\u000a\u000a## Template Syntax\u000a\u000a#### {{ blocks }}\u000a\u000aVariable blocks as placeholders for information that might change. For example:\u000a\u000a\u000a```html\u000ahello {{ name.first }} {{ name.last }}!\u000a```\u000a\u000aYou can also specify blocks within attributes.\u000a\u000a```html\u000amy favorite color is <span style=\"color: {{color}}\">{{color}}</span>\u000a```\u000a\u000aPaperclip also supports **inline javascript**. For example:\u000a\u000a```html\u000ahello {{ message || \"World\" }}! <br />\u000ainline-json {{ {'5+10 is':5+10, 'message is defined?' : message ? 'yes' : 'no' } | json }}\u000a```\u000a\u000a### Modifiers\u000a\u000aModifiers format data in a variable block. A good example of this might be presenting data to the user depending on their locale, or parsing data into markdown. Here are a few examples of how you can use\u000amodifiers:\u000a\u000a\u000a```html\u000a\u000aConverting content to markdown:\u000a\u000a{{ html: content | markdown }}\u000a\u000aUppercasing & converting to markdown:\u000a\u000a{{ html: content | uppercase | markdown }}\u000a\u000aModifiers with parameters:\u000a\u000aA human that is {{age}} years old is like a {{ age | divide(5.6) }} year old dog!\u000a```\u000a\u000a\u000a### Binding Operators\u000a\u000aPaperclip comes with various binding operators that give you full control over how references are handled. You can easily\u000aspecify whether to bind one way, two ways, or not at all. Here's the basic syntax:\u000a\u000a```javascript\u000aTwo-way binding:\u000a<input class=\"form-control\" data-bind=\"{{ model: <~>fullName }}\" />\u000a\u000aBind input value to fullName only:\u000a<input class=\"form-control\" data-bind=\"{{ model: ~>fullName }}\" />\u000a\u000aBind fullName to input value only:\u000a\u000a<input class=\"form-control\" data-bind=\"{{ model: <~fullName }}\" />\u000a\u000aUnbound helper - don't watch for any changes:\u000a{{ ~fullName }}\u000a```\u000a\u000a### Built-in components\u000a\u000a#### {{ html: content }}\u000a\u000aSimilar to escaping content in mustache (`{{{content}}}`). Good for security.\u000a\u000a```html\u000aUnsafe:\u000a{{ html: content }} <br />\u000a\u000aSafe:\u000a{{ content }} <br />\u000a```\u000a\u000a#### {{ #if: condition }}\u000a\u000aConditional block helper\u000a\u000a```html\u000a<input type=\"text\" class=\"form-control\" placeholder=\"What's your age?\" data-bind=\"{{ model: <~>age }}\"></input>\u000a{{#if: age >= 18 }}\u000a  You're legally able to vote in the U.S.\u000a{{/elseif: age > 16 }}\u000a  You're almost old enough to vote in the U.S.\u000a{{/else}}\u000a  You're too young to vote in the U.S.\u000a{{/}}\u000a```\u000a\u000a### data-bind attributes\u000a\u000adata-bind attributes are inspired by [knockout.js](http://knockoutjs.com/). This is useful if you want to attach behavior to any DOM element.\u000a\u000a\u000a#### {{ model: context }}\u000a\u000aInput data-binding\u000a\u000a```html\u000a<input type=\"text\" class=\"form-control\" placeholder=\"Type in a message\" data-bind=\"{{ model: <~>message }}\"></input>\u000a<h3>{{message}}</h3>\u000a```\u000a\u000aNotice the `<~>` operator. This tells paperclip to bind both ways. See [binding operators](#binding-operators) for more info.\u000a\u000a#### {{ event: expression }}\u000a\u000aExecuted when an event is fired on the DOM element. Here are all the available events:\u000a\u000a- `onChange` - called when an element changes\u000a- `onClick` - called when an element is clicked\u000a- `onLoad` - called when an element loads - useful for `&lt;img /&gt;`\u000a- `onSubmit` - called on submit - useful for `&lt;form /&gt;`\u000a- `onMouseDown` - called on mouse down\u000a- `onMouseUp` - called on mouse up\u000a- `onMouseOver` - called on mouse over\u000a- `onMouseOut` - called on mouse out\u000a- `onKeyDown` - called on key down\u000a- `onKeyUp` - called on key up\u000a- `onEnter` - called on enter key up\u000a- `onDelete` - called on delete key up\u000a\u000a```html\u000a<input type=\"text\" class=\"form-control\" placeholder=\"Type in a message\" data-bind=\"{{ onEnter: enterPressed = true, focus: true }}\"></input>\u000a\u000a{{#if: enterPressed }}\u000a  enter pressed\u000a{{/}}\u000a```\u000a\u000a\u000a#### {{ show: bool }}\u000a\u000aToggles the display mode of a given element. This is similar to the `{{if:expression}}` conditional helper.\u000a\u000a\u000a#### {{ css: styles }}\u000a\u000aSets the css of a given element. [For example](http://jsfiddle.net/JTxdM/81/):\u000a\u000a```html\u000ahow hot is it (fahrenheit)?: <input type=\"text\" class=\"form-control\" data-bind=\"{{ model: <~>temp }}\"></input> <br />\u000a\u000a<style type=\"text/css\">\u000a.cool { color: blue;   }\u000a.warm { color: yellow; }\u000a.hot  { color: red;    }\u000a</style>\u000a\u000a<strong data-bind=\"{{\u000a  css: {\u000a    cool    : temp > 0 || !temp,\u000a    warm    : temp > 60,\u000a    hot     : temp > 90\u000a  }\u000a}}\">\u000a  {{\u000a    temp > 60 ?\u000a    temp > 90 ? \"it's hot\" : \"it's warm\" :\u000a    \"it's cool\"\u000a  }}\u000a</strong>\u000a```\u000a\u000a#### {{ style: styles }}\u000a\u000aSets the style of a given element.\u000a\u000a```html\u000acolor: <input type=\"text\" data-bind=\"{{ model: <~>color }}\" class=\"form-control\"></input> <br />\u000asize: <input type=\"text\" data-bind=\"{{ model: <~>size }}\" class=\"form-control\"></input> <br />\u000a<span data-bind=\"{{\u000a  style: {\u000a    color       : color,\u000a    'font-size' : size\u000a  }\u000a}}\">Hello World</span>\u000a```\u000a\u000a#### {{ disable: bool }}\u000a\u000aToggles the enabled state of an element.\u000a\u000a```html\u000a<button data-bind={{ disable: !formIsValid }}>Sign Up</button>\u000a```\u000a\u000a#### {{ focus: bool }}\u000a\u000aFocuses cursor on an element.\u000a\u000a```html\u000a<input data-bind={{ focus: true }}></input>\u000a```\u000a\u000a### Advanced API\u000a\u000a#### paperclip.blockBinding(name, blockBindingClass)\u000a\u000aRegisters a new block binding class. Block bindings allow you to modify how templates behave. Some examples\u000ainclude the `{{#if:condition}}{{/}}`, and `{{html:content}}`.\u000a\u000a#### BaseBlockBinding(options)\u000a\u000aBase class to extend when creating custom block bindings. Here's an example for a [components binding](http://requirebin.com/?gist=858e3b7928eea5e1bed6):\u000a\u000a```javascript\u000avar pc = require(\"paperclip\");\u000a\u000avar ComponentBlockBinding = pc.BaseBlockBinding.extend({\u000a  bind: function (context) {\u000a    this.view = this.template.bind();\u000a    this.section.appendChild(this.view.render());\u000a    pc.BaseBlockBinding.prototype.bind.call(this, context);\u000a  },\u000a  _onChange: function (properties) {\u000a    this.view.context.setProperties(properties);\u000a  }\u000a});\u000a\u000apc.blockBinding(\"hello\", ComponentBlockBinding.extend({\u000a  hello: pc.template(\"hello <strong>{{message}}</strong>!\")\u000a});\u000a```\u000a\u000atemplate:\u000a\u000a```html\u000a{{ hello: { message: \"world\" }}}\u000a```\u000a\u000a#### override bind(context)\u000a\u000aCalled when the block is added, and bound to the DOM. This is where you initialize your binding.\u000aBe sure to call `paperclip.BaseBlockBinding.prototype.bind.call(this, context)` if you override.\u000athis method\u000a\u000a#### override unbind()\u000a\u000aCalled when the block is removed from the DOM. This is a cleanup method.\u000a\u000a#### override _onChange(context)\u000a\u000aCalled whenever the properties change for the block binding. These properties are defined in the\u000atemplate. Here's the syntax:\u000a\u000a```html\u000a{{blockName: blockProperties }}\u000a```\u000a\u000a#### nodeFactory\u000a\u000athe [node factory](https://github.com/mojo-js/nofactor.js) for creating elements. Use this to\u000amake your block binding compatible with the NodeJS and the browser.\u000a\u000a#### scriptName\u000a\u000athe name registered for the block binding\u000a\u000a#### section\u000a\u000athe [document section](https://github.com/mojo-js/document-section.js) which contains all the elements\u000a\u000a#### contentTemplate\u000a\u000athe content template - this might be undefined if your block binding doesn't have `{{#block:properties}}content{{/}}`.\u000a\u000a#### childBlockTemplate\u000a\u000aThe child block template. Used in the [conditional block](https://github.com/mojo-js/paperclip.js/blob/master/lib/paper/bindings/block/conditional.js).\u000a\u000a\u000a","bugs":{"url":"https://github.com/ojo-js/paperclip.js/issues"},"homepage":"https://github.com/ojo-js/paperclip.js","_id":"paperclip@0.6.8","_shasum":"dd79985f52179ad1b659f5946f92cb80b513c552","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.30","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"dd79985f52179ad1b659f5946f92cb80b513c552","tarball":"http://registry.npmjs.org/paperclip/-/paperclip-0.6.8.tgz"}}: paperclip
42 error If you need help, you may report this error at:
42 error     <http://github.com/npm/npm/issues>
43 verbose exit [ 1, true ]
