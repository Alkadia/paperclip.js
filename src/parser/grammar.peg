
Start
  = ChildNodes

ChildNodes
  = (Text/Binding/Element)*

Element
  = startTag:StartTag children:ChildNodes endTag:EndTag {

    if (startTag.name != endTag.name) {
      expected("</" + startTag.name + ">");
    }

    return {
      type: "element",
      name: startTag.name,
      children: children
    };
  }
  / StartTag
  / StartEndTag



Text
  = value:TextCharacter+ {
    return {
      type: "text",
      value: value.join("")
    }
  }

TextCharacter
  = !("<"/"{{") SourceCharacter {
      return text()
    }
  


StartTag
  = "<" info:TagInfo ">" { return info; }

StartEndTag
  = "<" info:TagInfo "/>" { return info; }

TagInfo
  = name:TagName Zs* attributes:Attribute* {
      return {
        name: name,
        attributes: attributes
      };
    }

EndTag
  = "</" name:TagName ">" {
      return {
        name: name
      };
    }

Attribute
  = name:AttributeName "=" string:StringLiteral {
      return {
        name: name,
        value: string.value
      };
    }
  / name:AttributeName {
      return {
        name: name
      }
    }


AttributeName
  = Zs* name:Word { return name; }

Zs 
  = [\u0020\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]

Binding
  = "{{" script:Expression* "}}" {
    return {
      type: "binding",
      script: script
    };
  }


Expression
  = Group
  / Object
  / VarName

Group
  = "(" Expression ")"

VarName
  = name:[a-z]+ { 
    return {
      type: "varName",
      value: name[0]
    }
  }

Object
  = "{" values:ObjectValues? "}" {
      return {
        type: "object",
        values: values
      }
    }

ObjectValues 
  = firstValue:ObjectValue additionalValues:("," ObjectValues)* {
    console.log(firstValue, additionalValues);

    return [
      firstValue
    ].concat(additionalValues.map(function (v) {
      return v[1][0];
    }));
  }

ObjectValue
  = name:(StringLiteral/VarName) ":" value:Expression {
    return {
      key: name.value,
      value: value.value
    }
  }


Variable
  = [a-z]+

StringLiteral "string"
  = '"' chars:DoubleStringCharacter* '"' {
      return { type: "StringLiteral", value: chars.join("") };
    }
  / "'" chars:SingleStringCharacter* "'" {
      return { type: "StringLiteral", value: chars.join("") };
    }


DoubleStringCharacter
  = !('"' / "\\") SourceCharacter { return text(); }
  / '\\"'


SingleStringCharacter
  = !("'" / "\\") SourceCharacter { return text(); }
  / "\\'"

SourceCharacter
  = .

TagName
  = Word

Word
  = chars:[a-z]+ { return chars.join(""); }


